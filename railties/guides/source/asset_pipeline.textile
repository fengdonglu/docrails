h2. 资产管道

本篇介绍在 Rails 3.1 中引进的资产管道。
通过本篇你可以：

* 理解资产管道是什么，干什么用
* 合理组织应用程序的资产
* 理解资产管道的好处
* 为管道添加预处理器
* 使用 gem 打包资产

endprologue.

h3. 什么是资产管道？

资产管道提供了联系和最小化或压缩 JavaScript and CSS 资产的框架。它还提供了在其它语言，比如CoffeeScript, Sass and ERB中编写这些资产的能力。

在Rails 3.1之前， 这些特性需要通过第三方 Ruby 库增加，比如 Jammit 和 Sprockets。 Rails 3.1 通过 Action Pack 集成了 Sprockets，默认情况下依赖 +sprockets+ gem。

这是 Rails 核心的特性，所有的开发者都可以从Sprockets这个单个中心库的资产预处理、压缩和最小化功能中受益。 This is part of Rails' "Fast by default" strategy as outlined by DHH in his 2011 keynote at Railsconf.

在 Rails 3.1 中，资产管道默认可用。 可以在 +application.rb+ 文件通过把这行代码放入 +Application+ 类定义中禁用：

<plain>
config.assets.enabled = false
</plain>

你也可以在创建应用程序时禁用它，加入 <tt>--skip-sprockets</tt> 选项。

<plain>
rails new appname --skip-sprockets
</plain>

推荐你在所有新应用中使用默认值。


h4. 主要特性

管道的首要特性是把资产联系起来。这在生产环境中很重要，因为它可以减少浏览器渲染页面时的请求数量。 While Rails already has a feature to concatenate these types of assets -- 通过在标签末尾放置 +:cache => true+ ，比如 +javascript_include_tag+ 和 +stylesheet_link_tag+ -- 很多人不使用它。

Rails 3.1 和后续版本的默认行为是把每个JS和CSS关系起来，成为一个大的主文件。然而，你还是可以在需要时分别使用多个文件或者分组文件（看下面）。在生产中，一个 MD5 指纹放入每个文件名，文件可以被浏览器缓存，如果指纹被修改，文件会被作废。

第二个特性是最小化或者压缩资产。对CSS来说，这通常包括了删除空白和注释。 对 JavaScript来说，可以使用更多的综合压缩手段。你可以从一系列选项中选择，或者指定你自己的。

第三个特性是使用其它语言或者语言扩展编写这些资产的能力。这包括了 Sass for CSS, CoffeeScript for JavaScript, 和 ERB for both.

h4. 什么是指纹？为什么要关心它？

指纹是一种依靠内容的文件名 that is static or infrequently updated is altered to be unique to the content contained in the file.

When a filename is unique and based on its content, HTTP headers can be set to encourage caches everywhere (at ISPs, in browsers) to keep their own copy of the content. When the content is updated, the fingerprint will change and the remote clients will request the new file. This is generally known as _cachebusting_.

最有效的技术是在文件中插入内容的哈希值，通常是在末尾。 比如一个 CSS 文件 +global.css+ 被哈希后，文件名就包含了哈希值。

<plain>
global.css => global-908e25f4bf641868d8683022a5b62f54.css
</plain>

这是Rails资产管道所采取的策略。

Rails旧的策略是使用内置辅助方法链接时在每个资产中加入查询字符串 。在资源中生成代码看起来象这样：

<plain>
/stylesheets/global.css?1309495796
</plain>

这会有几个障碍：

<ol>
  <li>
    <strong>不是所有的缓存会带着查询字符串缓存内容</strong><br>
    "Steve Souders recommends":http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/, "...avoiding a querystring for cacheable resources". 他发现在这种情况下 5-20% 的请求不会被缓存。
  </li>
  <li>
    <strong>在多服务器环境下，文件名在不同节点上会被改变。</strong><br>
    The query string in Rails is based on the modification time of the files. 当资产被发布到集群，就无法保证时间戳一致， resulting in different values being used depending on which server handles the request.
  </li>
</ol>

另一个问题，当静态资产随着每个代码版本发布， *所有* 这些文件的mtime就会改变，即使那些资产的内容并没有改变，也会强迫所有远程客户端去重新获取它们。

指纹通过确保文件名基于它们的内容，避免了所有这些问题。

默认情况下，指纹在生产环境中生效，而在其它所有环境中无效。你可以在你的配置中，通过 +config.assets.digest+ 选项激活或禁用它。

进阶阅读:

* 优化缓存"Optimize caching":http://code.google.com/speed/page-speed/docs/caching.html
* "Revving Filenames: don’t use querystring":http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/


h3. 如何使用资产管道

在之前的 Rails 版本中， 所有的资产位于 +public+ 的子目录中，比如 +images+ 、 +javascripts+ 和 +stylesheets+ 。 With the asset pipeline, the preferred location for these assets is now the +app/assets+ directory. Files in this directory are served by the Sprockets 中间件 included in the sprockets gem.

This is not to say that assets can (or should) no longer be placed in +public+; they still can be and will be served as static files by the application or web server. You would only use +app/assets+ if you wish your files to undergo some pre-processing before they are served.

In production, the default is to precompile these files to +public/assets+ so that they can be more efficiently delivered by the webserver.

当应用程序中的脚手架或者控制器做生成操作，Rails 也会为控制器生成 JavaScript 文件 (或者如果在+Gemfile+文件中有+coffee-rails+ gem，会产生 CoffeeScript 文件) 和层叠样式文件（或者如果在+Gemfile+文件中有 +sass-rails+ ，会产生 SCSS 文件 ）

例如, if a +ProjectsController+ is generated, there will be a new file at +app/assets/javascripts/projects.js.coffee+ and another at +app/assets/stylesheets/projects.css.scss+. You should put any JavaScript or CSS unique to a controller inside their respective asset files, as these files can then be loaded just for these controllers with lines such as +<%= javascript_include_tag params[:controller] %>+ or +<%= stylesheet_link_tag params[:controller] %>+.

NOTE: 你会需要 "ExecJS":https://github.com/sstephenson/execjs#readme 运行时支持，以使用 CoffeeScript。如果你使用 Mac OS X 或者 Windows ，你的操作系统上已经安装了 JavaScript 运行环境。查看 "ExecJS":https://github.com/sstephenson/execjs#readme 文档以了解所有 JavaScript 运行环境信息。

h4. 组织资产

资产可以放置在应用程序中的这三个位置： +app/assets+, +lib/assets+ or +vendor/assets+ 。

+app/assets+ 是应用程序拥有的资产，例如顾客图片、 JavaScript 文件或者样式表。

+lib/assets+ is for your own libraries' code that doesn't really fit into the scope of the application or those libraries which are shared across applications.

+vendor/assets+ 用于外部实体拥有的资产，比如 JavaScript 插件的代码。

在这三个位置的所有子目录都加入了 Sprockets 的搜索路径(visible by calling +Rails.application.config.assets.paths+ in a console). When an asset is requested, these paths are traversed to see if they contain an asset matching the name specified. Once an asset has been found, it's processed by Sprockets and served.

你完全可以在 +application.rb+ 中为管道添加更多的路径。例如：

<erb>
config.assets.paths << File.join(Rails.root, 'app', 'assets', 'flash')
</erb>

h4. 编写链接至资产的代码

Sprockets 不会添加更多的访问资产方法 - 你还是使用已熟知的 +javascript_include_tag+ 和 +stylesheet_link_tag+ 。

<erb>
<%= stylesheet_link_tag "application" %>
<%= javascript_include_tag "application" %>
</erb>

在正常的视图中，你可以象这样在 +assets/images+ 路径中访问图片：

<erb>
<%= image_tag "rails.png" %>
</erb>

Provided that the pipeline is enabled within your application (and not disabled in the current environment context), 文件由 Sprockets 发布。 如果文件在 +public/assets/rails.png+ ，它由网页服务器发布。

可选地， a request for a file with an MD5 hash such as +public/assets/rails-af27b6a414e6da00003503148be9b409.png+ is treated the same way. How these hashes are generated is covered in the "In Production":#in-production section later on in this guide.

Sprockets will also look through the paths specified in +config.assets.paths+ which includes the standard application paths and any path added by Rails engines.

如果需要，图片也可以组织成目录，在标签中指定目录名访问：

<erb>
<%= image_tag "icons/rails.png" %>
</erb>

h5. CSS 和 ERB

如果你为CSS资产指定了 +erb+ 扩展名， 比如 +application.css.erb+ ， 在你的CSS规则中可以使用 +asset_path+ 辅助方法：

<plain>
.class { background-image: url(<%= asset_path 'image.png' %>) }
</plain>

This writes the path to the particular asset being referenced. 本例中， it would make sense to have an image in one of the asset load paths, such as +app/assets/images/image.png+, which would be referenced here. If this image is already available in +public/assets+ as a fingerprinted file, then that path is referenced.

如果你想使用 "css data URI":http://en.wikipedia.org/wiki/Data_URI_scheme -- 一种在CSS文件中直接内嵌图片数据的方法 -- 你可以使用 +asset_data_uri+ 辅助方法。

<plain>
#logo { background: url(<%= asset_data_uri 'logo.png' %>) }
</plain>

This inserts a correctly-formatted data URI into the CSS source.

Note that the closing tag cannot be of the style +-%>+.

h5. CSS 和 Sass

使用资产管道时， 必须重新编写资产的路径。+sass-rails+ 提供了 +-url+ 和 +-path+ 辅助方法 (在 Sass 中是连字符，在 Ruby 中是下划线) for the following asset classes: image, font, video, audio, JavaScript and stylesheet.

* +image-url("rails.png")+ 变成 +url(/assets/rails.png)+
* +image-path("rails.png")+ 变成 +"/assets/rails.png"+.

The more generic form can also be used but the asset path and class must both be specified:

* +asset-url("rails.png", image)+ becomes +url(/assets/rails.png)+
* +asset-path("rails.png", image)+ becomes +"/assets/rails.png"+

h5. JavaScript/CoffeeScript 和 ERB

如果你为JavaScript资产指定了 +erb+ 扩展名， 比如 +application.js.erb+ ，你就可以在你的 JavaScript 代码中使用 +asset_path+ 辅助方法：

<plain>
$('#logo').attr({
  src: "<%= asset_path('logo.png') %>"
});
</plain>

This writes the path to the particular asset being referenced.

类似地,你可以使用在 +erb+ 扩展名的 CoffeeScript 文件中使用 +asset_path+ 辅助方法 (例如 application.js.coffee.erb)：

<plain>
$('#logo').attr src: "<% asset_path('logo.png') %>"
</plain>

h4. Manifest 文件和 Directives

Sprockets uses manifest files to determine which assets to include and serve. These manifest files contain _directives_ -- instructions that tell Sprockets which files to require in order to build a single CSS or JavaScript file. With these directives, Sprockets loads the files specified, processes them if necessary, concatenates them into one single file and then compresses them (if +Rails.application.config.assets.compress+ is set to +true+). By serving one file rather than many, the load time of pages are greatly reduced as there are fewer requests to make.

例如， in the default Rails application there's a +app/assets/javascripts/application.js+ file which contains the following lines:

<plain>
//= require jquery
//= require jquery_ujs
//= require_tree .
</plain>

在 JavaScript 文件中， 指令由 +//=+ 开头。 这种情况下，文件使用 +require+ 和 +require_tree+ 指令。 +require+ 指令用于告诉 Sprockets the files that you wish to require. 在这里， you are requiring the files +jquery.js+ and +jquery_ujs.js+ that are available somewhere in the search path for Sprockets. You need not supply the extensions explicitly. Sprockets 假定你请求一个 +.js+ 文件 when done from within a +.js+ file.

NOTE. Rails 3.1 中，+jquery.js+ 和 +jquery_ujs.js+ 文件 are located inside the +vendor/assets/javascripts+ directory contained within the +jquery-rails+ gem.

The +require_tree .+ directive tells Sprockets to include _all_ JavaScript files in this directory into the output. Only a path relative to the file can be specified. There is also a +require_directory+ directive which includes all JavaScript files only in the directory specified (no nesting).

There's also a default +app/assets/stylesheets/application.css+ 文件，包含了以下行：

<plain>
/* ...
*= require_self
*= require_tree .
*/
</plain>

The directives that work in the JavaScript files also work in stylesheets, obviously including stylesheets rather than JavaScript files. The +require_tree+ directive here works the same way as the JavaScript one, requiring all stylesheets from the current directory.

In this example +require_self+ is used. This puts the CSS contained within the file (if any) at the top of any other CSS in this file unless +require_self+ is specified after another +require+ directive.

You can have as many manifest files as you need. For example the +admin.css+ and +admin.js+ manifest could contain the JS and CSS files that are used for the admin section of an application.

对于一些资产来说(象 CSS)，编译次序很重要。你可以指定文件的编译次序：

<plain>
/* ...
*= require reset
*= require layout
*= require chrome
*/
</plain>


h4. 预处理

资产的扩展名决定了应该采用哪种预处理方法。When a controller or a scaffold is generated with the default Rails gemset, a CoffeeScript file and a SCSS file are generated in place of a regular JavaScript and CSS file. 之前的名为 "projects" 的控制器示例,，生成了+app/assets/javascripts/projects.js.coffee+ 和 +app/assets/stylesheets/projects.css.scss+ 文件。

When these files are requested, they are processed by the processors provided by the +coffee-script+ and +sass-rails+ gems and then sent back to the browser as JavaScript and CSS respectively.

Additional layers of pre-processing can be requested by adding other extensions, where each extension is processed in a right-to-left manner. These should be used in the order the processing should be applied. For example, a stylesheet called +app/assets/stylesheets/projects.css.scss.erb+ is first processed as ERB, then SCSS and finally served as CSS. The same applies to a JavaScript file -- +app/assets/javascripts/projects.js.coffee.erb+ is processed as ERB, CoffeeScript and served as JavaScript.

Keep in mind that the order of these pre-processors is important. 例如，如果你调用 JavaScript 文件 +app/assets/javascripts/projects.js.erb.coffee+ ，它由 CoffeeScript 转译器首先处理，它将不会理解 ERB ，and therefore you would run into problems.

h3. 开发中

开发模式中，资产被分为多个文件，in the order they are specified in the manifest file.

This manifest +application.js+:

<plain>
//= require core
//= require projects
//= require tickets
</plain>

会生成这个 HTML ：

<html>
<script src='/assets/core.js?body=1'></script>
<script src='/assets/projects.js?body=1'></script>
<script src='/assets/tickets.js?body=1'></script>
</html>

Sprockets 需要 +body+ 参数。

h4. 关闭调试

你可以关闭调试模式，修改 +development.rb+ ，包含以下代码：

<erb>
config.assets.debug = false
</erb>

调试模式关闭后，Sprockets will concatenate and run the necessary preprocessors on all files, 产生以下的 HTML：

<html>
<script src='/assets/application.js'></script>
</html>

资产在服务器启动后的首次请求时被编译和缓存。 Sprockets sets a +must-revalidate+ Cache-Control HTTP header to reduce request overhead on subsequent requests -- 这时浏览器会得到一个 304 (无修改) 的应答。

If any of the files in the manifest have changed between requests, the server responds with a new compiled file.

You can put +?debug_assets=true+ or +?debug_assets=1+ at the end of a URL to enable debug mode on-demand, and this will render individual tags for each file. This is useful for tracking down exact line numbers when debugging.

Debug can also be set in the Rails helper methods:

<erb>
<%= stylesheet_link_tag "application", :debug => true %>
<%= javascript_include_tag "application", :debug => true %>
</erb>

如果关闭了调试模式， +:debug+ 选项会被忽略。

You could potentially also enable compression in development mode as a sanity check, and disable it on-demand as required for debugging.


h3. 生产中

生产环境中， Rails使用上面提到的指纹模式。默认时，它假定资产已经被预编译，作为静态资产由你的网页服务器发布。

During the precompilation phase an MD5 is generated from the contents of the compiled files, and inserted into the filenames as they are written to disc. 这些指纹化的名字 are used by the Rails helpers in place of the manifest name.

比如这样：

<erb>
<%= javascript_include_tag "application" %>
<%= stylesheet_link_tag "application" %>
</erb>

产生了一些东西，象这样：

<html>
<script src="/assets/application-908e25f4bf641868d8683022a5b62f54.js" type="text/javascript"></script>
<link href="/assets/application-4dd5b109ee3439da54f5bdfd78a80473.css" media="screen" rel="stylesheet" type="text/css" />
</html>

The fingerprinting behavior is controlled by the setting of +config.assets.digest+ setting in Rails (which is +true+ for production, +false+ for everything else).

NOTE: Under normal circumstances the default option should not be changed. If there are no digests in the filenames, and far-future headers are set, remote clients will never know to refetch the files when their content changes.

h4. 预编译资产

Rails comes bundled with a rake task to compile the asset manifests and other files in the pipeline to the disk.

编译后的资产被写入 +config.assets.prefix+ 指定的位置。默认是 +public/assets+ 目录。

You must use this task either during deployment or locally if you do not have write access to your production filesystem.

rake 任务是：

<plain>
bundle exec rake assets:precompile
</plain>

Capistrano (v2.8.0 and above) has a recipe to handle this in deployment. 在 +Capfile+ 中加入以下行：

<erb>
load 'deploy/assets'
</erb>

This links the folder specified in +config.assets.prefix+ to +shared/assets+. If you already use this shared folder you'll need to write your own deployment task.

很重要的一点，这个文件夹 is shared between deployments so that remotely cached pages that reference the old compiled assets still work for the life of the cached page.

NOTE. 如果你在本地预编译你的资产， you can use +bundle install --without assets+ on the server to avoid installing the assets gems (the gems in the assets group in the Gemfile).

The default matcher for compiling files includes +application.js+, +application.css+ and all files that do not end in +js+ or +css+:

<ruby>
[ /\w<plus>\.(?!js|css).<plus>/, /application.(css|js)$/ ]
</ruby>

If you have other manifests or individual stylesheets and JavaScript files to include, 你可以把它们加入 +precompile+ 队列：

<erb>
config.assets.precompile += ['admin.js', 'admin.css', 'swfObject.js']
</erb>

rake任务还会生成 +manifest.yml+ ，包含了你所有的资产和各自指纹的列表。由辅助方法使用，用于避免handing the mapping requests back to Sprockets. 一个典型的 manifest 文件看来象这样：

<plain>
---
rails.png: rails-bd9ad5a560b5a3a7be0808c5cd76a798.png
jquery-ui.min.js: jquery-ui-7e33882a28fc84ad0e0e47e46cbf901c.min.js
jquery.min.js: jquery-8a50feed8d29566738ad005e19fe1c2d.min.js
application.js: application-3fdab497b8fb70d20cfc5495239dfc29.js
application.css: application-8af74128f904600e41a6e39241464e03.css
</plain>

The default location for the manifest is the root of the location specified in +config.assets.prefix+ ('/assets' by default).

可以使用 +config.assets.manifest+ 选项进行修改。需要指定完整的路径：

<erb>
config.assets.manifest = '/path/to/some/other/location'
</erb>

NOTE: 如果生产时丢失了预编译文件，你会得到一个 <tt>AssetNoPrecompiledError</tt> 异常，指出了丢失文件的文件名。

h5. 服务器配置

文件系统上预编译后的资产直接由你的网页服务器发布。 They do not have far-future headers by default, so to get the benefit of fingerprinting you'll have to update your server configuration to add them.

对于Apache：

<plain>
<LocationMatch "^/assets/.*$">
  # Some browsers still send conditional-GET requests if there's a
  # Last-Modified header or an ETag header even if they haven't
  # reached the expiry date sent in the Expires header.
  Header unset Last-Modified
  Header unset ETag
  FileETag None
  # RFC says only cache for 1 year
  ExpiresActive On
  ExpiresDefault "access plus 1 year"
</LocationMatch>
</plain>

对于nginx：

<plain>
location ~ ^/assets/ {
  expires 1y;
  add_header Cache-Control public;

  # Some browsers still send conditional-GET requests if there's a
  # Last-Modified header or an ETag header even if they haven't
  # reached the expiry date sent in the Expires header.
  add_header Last-Modified "";
  add_header ETag "";
  break;
}
</plain>

当文件被预压缩， Sprockets 还会创建一个 "Gzip":http://en.wikipedia.org/wiki/Gzip (.gz) 版本的资产。这避免了服务器为每个请求做同样的事； it can simply read the compressed files from disk. 你必须配置服务器使用 gzip 压缩方式，提供 +public/assets+ 目录中的压缩资产。可以使用以下的配置选项：

对于Apache：

<plain>
<LocationMatch "^/assets/.*$">
  # 2 lines to serve pre-gzipped version
  RewriteCond %{REQUEST_FILENAME}.gz -s
  RewriteRule ^(.+) $1.gz [L]
</LocationMatch>

# without these, Content-Type will be "application/x-gzip"
<FilesMatch "^/assets/.*\.css.gz$">
    ForceType text/css
</FilesMatch>

<FilesMatch "^/assets/.*\.js.gz$">
    ForceType text/javascript
</FilesMatch>
</plain>

对于Nginx：

<plain>
location ~ ^/(assets)/  {
  root /path/to/public;
  gzip_static on; # to serve pre-gzipped version
  expires max;
  add_header  Cache-Control public;
}
</plain>

h4. Live Compilation

某些情况下，你会希望使用 live compilation。这种模式下，管道中所有的资产请求都直接由 Sprockets 处理。

打开这个选项：

<erb>
config.assets.compile = true
</erb>

On the first request the assets are compiled and cached as outlined in development above, and the manifest names used in the helpers are altered to include the MD5 hash.

Sprockets 还会设置 +Cache-Control+ HTTP header to +max-age=31536000+. This signals all caches between your server and the client browser that this content (the file served) can be cached for 1 year.这个的效果就是减少了从你服务器的这个资产的请求数量；这个资产就更有机会进入浏览器或者某些中间层的缓存。

这种模式使用更多的内存，会比默认情况恶化性能，不推荐。

当在未具备 JavaScript 运行时的系统中部署生产程序，你可以加入 Gemfile 文件：

<plain>
group :production do
  gem 'therubyracer'
end
</plain>

h3. 自定义管道

h4. CSS 压缩

目前有一个YUI选项用于压缩 CSS 。The "YUI CSS compressor":http://developer.yahoo.com/yui/compressor/css.html provides minification.

下面激活 YUI 压缩器，需要 +yui-compressor+ gem.

<erb>
config.assets.css_compressor = :yui
</erb>

 +config.assets.compress+ 选项必须设置为 +true+ ，以激活 CSS 压缩。

h4. JavaScript 压缩

JavaScript 压缩的可选参数有 +:closure+ 、 +:uglifier+ 和 +:yui+ 。 这些各自需要使用 +closure-compiler+ 、 +uglifier+ 或者 +yui-compressor+ gems 。

Gemfile 默认包含了 "uglifier":https://github.com/lautis/uglifier. 这个 Gem 在 Ruby 中包装了 "UglifierJS":https://github.com/mishoo/UglifyJS (为NodeJS编写) 。 它压缩你的代码 by removing white space and other magical things like changing your +if+ and +else+ statements to ternary operators where possible.

下面引用了 +uglifier+ 进行 JavaScript 压缩。

<erb>
config.assets.js_compressor = :uglifier
</erb>

+config.assets.compress+ 必须设置成 +true+ 以激活 JavaScript 压缩。

NOTE: You will need a "ExecJS":https://github.com/sstephenson/execjs#readme supported runtime in order to use +uglifier+. If you are using Mac OS X or Windows you have installed a JavaScript runtime in your operating system. Check "ExecJS":https://github.com/sstephenson/execjs#readme documentation to know all supported JavaScript runtimes.

h4. 使用你自己的压缩器

The compressor config settings for CSS and JavaScript also take any Object. 这个对象必须拥有一个 +compress+ 方法，使用一个字符串作为唯一的参数，必须返回一个字符串。

<erb>
class Transformer
  def compress(string)
    do_something_returning_a_string(string)
  end
end
</erb>

在+application.rb+的配置选项中放置一个+new+对象来要激活它：
 
<erb>
config.assets.css_compressor = Transformer.new
</erb>


h4. 改变 _assets_ 路径

The public path that Sprockets uses by default is +/assets+.

可以改成：

<erb>
config.assets.prefix = "/some_other_path"
</erb>

This is a handy option if you have any existing project (pre Rails 3.1) that already uses this path or you wish to use this path for a new resource.

h4. X-Sendfile Headers

The X-Sendfile header is a directive to the server to ignore the response from the application, and instead serve the file specified in the headers. This option is off by default, but can be enabled if your server supports it. When enabled, this passes responsibility for serving the file to the web server, which is faster.

Apache 和 Nginx 支持这个选项 which is enabled in <tt>config/environments/production.rb</tt>.

<erb>
# config.action_dispatch.x_sendfile_header = "X-Sendfile" # for apache
# config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for nginx
</erb>

WARNING: 如果你正在升级一个已存在的应用程序，想要使用这个选项，要注意这个配置选项只能粘贴入 +production.rb+ (而不能在 +application.rb+ 中) and any other environment you define with production behavior.

h3. 缓存如何工作

Sprockets 使用默认的 Rails 缓存存储，在开发和生产环境中缓存资产。

TODO: Add more about changing the default store.

h3. 在你的 Gems 中添加资产

资产也可以用gems的形式由外部资源提供。

关于这个有个很好的例子。Rails带的 +jquery-rails+ gem ，就是一个标准的 JavaScript 库 gem。这个 gem 包含了从 +Rails::Engine+ 继承的一个引擎类。 By doing this, Rails is informed that the directory for this gem may contain assets and the +app/assets+, +lib/assets+ and +vendor/assets+ directories of this engine are added to the search path of Sprockets.

h3. Making Your Library or Gem a Pre-Processor

TODO: Registering gems on "Tilt":https://github.com/rtomayko/tilt enabling Sprockets to find them.

h3. 从 Rails 旧版本升级

升级时有两个任务。第一个是将文件移到新的位置。 查看之前的小节，得到不同文件类型的正确位置的指导。

第二个是使用正确的默认选项升级各种环境文件。 下面的修改反映了 3.1.0 版本中的默认情况：

+application.rb+ 中：

<erb>
# Enable the asset pipeline
config.assets.enabled = true

# Version of your assets, change this if you want to expire all your assets
config.assets.version = '1.0'

# Change the path that assets are served from
# config.assets.prefix = "/assets"
</erb>

+development.rb+ 中：

<erb>
# Do not compress assets
config.assets.compress = false

# Expands the lines which load the assets
config.assets.debug = true
</erb>

和在+production.rb+中：

<erb>
# Compress JavaScripts and CSS
config.assets.compress = true

# Choose the compressors to use
# config.assets.js_compressor  = :uglifier
# config.assets.css_compressor = :yui

# Don't fallback to assets pipeline if a precompiled asset is missed
config.assets.compile = false

# Generate digests for assets URLs.
config.assets.digest = true

# Defaults to Rails.root.join("public/assets")
# config.assets.manifest = YOUR_PATH

# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
# config.assets.precompile += %w( search.js )
</erb>

不用改变 +test.rb+ 。测试环境的默认值是： +config.assets.compile+ 为 true ， +config.assets.compress+ 、 +config.assets.debug+ 和 +config.assets.digest+ 是 false 。

在 +Gemfile+ 中加入：

<plain>
# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   "~> 3.1.0"
  gem 'coffee-rails', "~> 3.1.0"
  gem 'uglifier'
end
</plain>

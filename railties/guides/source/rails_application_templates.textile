h2. Rails 应用程序模板

应用程序模板是一些简单的 Ruby 文件，包含了添加插件/gems/初始化器等等的DSL 。可用于你新创建的应用程序，或是已存在的 Rails 项目。

基于本篇，你可以：

* 使用模板产生/定制 Rails 应用程序
* 使用 Rails 模板 API 编写你自己的可重用应用程序模板

endprologue.

h3. 用法

使用模板时，你需要通过 -m 选项为生成器指定模板的位置，可以是文件路径或URL。

<shell>
$ rails new blog -m ~/template.rb
$ rails new blog -m http://example.com/template.rb
</shell>

你可以使用 rake 任务 +rails:template+ 把模板应用到已存在的应用程序中。模板的位置需要使用名为 LOCATION 的环境变量传入。这同样可以是文件路径或URL。

<shell>
$ rake rails:template LOCATION=~/template.rb
$ rake rails:template LOCATION=http://example.com/template.rb
</shell>

h3. 模板API

模板API是自注释的，很容易理解。这是一个典型模板的示例：

<ruby>
# template.rb
run "rm public/index.html"
generate(:scaffold, "person name:string")
route "root :to => 'people#index'"
rake("db:migrate")

git :init
git :add => "."
git :commit => "-a -m 'Initial commit'"
</ruby>

下面这些小节描述了API提供的主要方法的概况：

h4. gem(name, options = {})

Adds a +gem+ entry for the supplied gem to the generated application’s +Gemfile+.

例如，如果你的应用程序依赖于 +bj+ 和 +nokogiri+  gems ：

<ruby>
gem "bj"
gem "nokogiri"
</ruby>

Please note that this will NOT install the gems for you and you will have to run +bundle install+ to do that.

<ruby>
bundle install
</ruby>

h4. gem_group(*names, &block)

Wraps gem entries inside a group.

例如, if you want to load +rspec-rails+ only in +development+ and +test+ group:

<ruby>
gem_group :development, :test do
  gem "rspec-rails"
end
</ruby>

h4. add_source(source, options = {})

Adds the given source to the generated application's +Gemfile+.

例如, if you need to source a gem from "http://code.whytheluckystiff.net":

<ruby>
add_source "http://code.whytheluckystiff.net"
</ruby>

h4. plugin(name, options = {})

Installs a plugin to the generated application.

Plugin can be installed from Git:

<ruby>
plugin 'authentication', :git => 'git://github.com/foor/bar.git'
</ruby>

You can even install plugins as git submodules:

<ruby>
plugin 'authentication', :git => 'git://github.com/foor/bar.git',
                         :submodule => true
</ruby>

请注意你需要 +git :init+ before you can install a plugin as a submodule.

Or use plain old SVN:

<ruby>
plugin 'usingsvn', :svn => 'svn://example.com/usingsvn/trunk'
</ruby>

h4. vendor/lib/file/initializer(filename, data = nil, &block)

Adds an initializer to the generated application’s +config/initializers+ directory.

Lets say you like using +Object#not_nil?+ and +Object#not_blank?+:

<ruby>
initializer 'bloatlol.rb', <<-CODE
class Object
  def not_nil?
    !nil?
  end

  def not_blank?
    !blank?
  end
end
CODE
</ruby>

Similarly +lib()+ creates a file in the +lib/+ directory and +vendor()+ creates a file in the +vendor/+ directory.

There is even +file()+, which accepts a relative path from +Rails.root+ and creates all the directories/file needed:

<ruby>
file 'app/components/foo.rb', <<-CODE
class Foo
end
CODE
</ruby>

That’ll create +app/components+ directory and put +foo.rb+ in there.

h4. rakefile(filename, data = nil, &block)

创建一个新的 rake 文件 under +lib/tasks+ with the supplied tasks:

<ruby>
rakefile("bootstrap.rake") do
  <<-TASK
    namespace :boot do
      task :strap do
        puts "i like boots!"
      end
    end
  TASK
end
</ruby>

The above creates +lib/tasks/bootstrap.rake+ with a +boot:strap+ rake task.

h4. generate(what, args)

Runs the supplied rails generator with given arguments.

<ruby>
generate(:scaffold, "person", "name:string", "address:text", "age:number")
</ruby>

h4. run(command)

Executes an arbitrary command. Just like the backticks. Let's say you want to remove the +public/index.html+ file:

<ruby>
run "rm public/index.html"
</ruby>

h4. rake(command, options = {})

Runs the supplied rake tasks in the Rails application. Let's say you want to migrate the database:

<ruby>
rake "db:migrate"
</ruby>

You can also run rake tasks with a different Rails environment:

<ruby>
rake "db:migrate", :env => 'production'
</ruby>

h4. route(routing_code)

This adds a routing entry to the +config/routes.rb+ file. In above steps, we generated a person scaffold and also removed +public/index.html+. Now to make +PeopleController#index+ as the default page for the application:

<ruby>
route "root :to => 'person#index'"
</ruby>

h4. inside(dir)

Enables you to run a command from the given directory. 例如, if you have a copy of edge rails that you wish to symlink from your new apps, you can do this:

<ruby>
inside('vendor') do
  run "ln -s ~/commit-rails/rails rails"
end
</ruby>

h4. ask(question)

+ask()+ gives you a chance to get some feedback from the user and use it in your templates. Lets say you want your user to name the new shiny library you’re adding:

<ruby>
lib_name = ask("What do you want to call the shiny library ?")
lib_name << ".rb" unless lib_name.index(".rb")

lib lib_name, <<-CODE
class Shiny
end
CODE
</ruby>

h4. yes?(question) or no?(question)

These methods let you ask questions from templates and decide the flow based on the user’s answer. Lets say you want to freeze rails only if the user want to:

<ruby>
rake("rails:freeze:gems") if yes?("Freeze rails gems ?")
no?(question) acts just the opposite.
</ruby>

h4. git(:command)

Rails templates let you run any git command:

<ruby>
git :init
git :add => "."
git :commit => "-a -m 'Initial commit'"
</ruby>

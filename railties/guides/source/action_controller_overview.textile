h2. Action Controller 概述

本篇中你会学习到控制器如何工作 and how they fit into the request cycle in your application. After reading this guide, you will be able to:

* 控制器处理请求的流程
* 理解为什么和如何在 Session 或者 Cookies 中保存数据
* 在处理请求时使用过滤器执行代码
* 使用 Action Controller 内置的 HTTP 认证
* 发送给用户浏览器的数据流
* Filter sensitive parameters so they do not appear in the application's log
* 处理请求过程中的异常处理

endprologue.

h3. 控制器是做什么事的？

Action Controller 是 MVC 模式中的 C 。确定路由后，控制器就用于处理请求， 你的控制器负责搞清楚请求，生成恰当的输出。幸运的是，Action Controller为你做了大多数底层工作，and uses smart conventions to make this as straightforward as possible.

For most conventional RESTful applications, 控制器接收请求 (对于开发者来说不可见)，从模型抓取或保存数据，使用视图创建 HTML 输出。 If your controller needs to do things a little differently, that's not a problem, this is just the most common way for a controller to work.

A controller can thus be thought of as a middle man between models and views. 它使模型的数据对视图可见，视图才能把数据显示给用户，它从用户那里取得数据，并保存或者更新至模型。

NOTE: 更多路由处理的细节，请查阅 "Rails路由深入浅出":routing.html.

h3. 方法和 Actions

控制器是从 +ApplicationController+ 继承的Ruby类，和其它类一样有方法。 当你的应用程序接收到请求，路由器确认要运行哪个控制器和 Action ， 然后 Rails 创建控制器的实例， runs the method with the same name as the action.

<ruby>
class ClientsController < ApplicationController
  def new
  end
end
</ruby>

例如，用户访问应用程序的 +/clients/new+ 来添加客户， Rails 会创建 +ClientsController+ 的实例，运行 +new+ 方法。 注意 that the empty method from the example above could work just fine because Rails will by default render the +new.html.erb+ view unless the action says otherwise. The +new+ method could make available to the view a +@client+ instance variable by creating a new +Client+:

<ruby>
def new
  @client = Client.new
end
</ruby>

"布局和渲染":layouts_and_rendering.html 解释了更多的细节。

+ApplicationController+ 从 +ActionController::Base+ 继承，它定义了一系列有用的辅助方法。本篇会介绍其中的一些。如果好奇，可以在 API 文档中查看源代码中所有的辅助方法。

只有公共方法能被 Action 调用。 尽量降低 Action 不使用的方法的可见性， 例如备用的方法或者过滤器。

h3. 参数

你也许希望在你的控制器Actions中访问用户传入的数据或者其它参数。在 Web 应用程序中可能有两种类型的参数。第一种是在发送的URL中， 称为查询字符串参数。查询字符串是URL的 "?" 之后的所有东西。第二种通常指 POST 数据。 This information usually comes from an HTML form which has been filled in by the user. It's called POST data because it can only be sent as part of an HTTP POST request. Rails does not make any distinction between query string parameters and POST parameters, and both are available in the +params+ hash in your controller:

<ruby>
class ClientsController < ActionController::Base
  # This action uses query string parameters because it gets run
  # by an HTTP GET request, but this does not make any difference
  # to the way in which the parameters are accessed. The URL for
  # this action would look like this in order to list activated
  # clients: /clients?status=activated
  def index
    if params[:status] == "activated"
      @clients = Client.activated
    else
      @clients = Client.unactivated
    end
  end

  # This action uses POST parameters. They are most likely coming
  # from an HTML form which the user has submitted. The URL for
  # this RESTful request will be "/clients", and the data will be
  # sent as part of the request body.
  def create
    @client = Client.new(params[:client])
    if @client.save
      redirect_to @client
    else
      # This line overrides the default rendering behavior, which
      # would have been to render the "create" view.
      render :action => "new"
    end
  end
end
</ruby>

h4. Hash 和数组参数

The +params+ hash is not limited to one-dimensional keys and values. It can contain arrays and (nested) hashes. To send an array of values, append an empty pair of square brackets "[]" to the key name:

<pre>
GET /clients?ids[]=1&ids[]=2&ids[]=3
</pre>

NOTE: The actual URL in this example 被编码为 "/clients?ids%5b%5d=1&ids%5b%5d=2&ids%5b%5d=3" as "[" and "]" are not allowed in URLs. Most of the time you don't have to worry about this because the browser will take care of it for you, and Rails will decode it back when it receives it, but if you ever find yourself having to send those requests to the server manually you have to keep this in mind.

The value of +params[:ids]+ will now be +["1", "2", "3"]+. Note that parameter values are always strings; Rails makes no attempt to guess or cast the type.

To send a hash you include the key name inside the brackets:

<html>
<form accept-charset="UTF-8" action="/clients" method="post">
  <input type="text" name="client[name]" value="Acme" />
  <input type="text" name="client[phone]" value="12345" />
  <input type="text" name="client[address][postcode]" value="12345" />
  <input type="text" name="client[address][city]" value="Carrot City" />
</form>
</html>

When this form is submitted, the value of +params[:client]+ will be <tt>{"name" => "Acme", "phone" => "12345", "address" => {"postcode" => "12345", "city" => "Carrot City"}}</tt>. Note the nested hash in +params[:client][:address]+.

Note that the +params+ hash is actually an instance of +HashWithIndifferentAccess+ from Active Support, which acts like a hash that lets you use symbols and strings interchangeably as keys.

h4. JSON/XML 参数

如果你正在编写WebService应用， 你会发现更容易接受 JSON 或 XML 格式的参数。Rails会自动地把你的参数转换为 +params+ hash ， which you'll be able to access like you would normally do with form data.

例如， 如果你发送这个 JSON 参数：

<pre>
{ "company": { "name": "acme", "address": "123 Carrot Street" } }
</pre>

You'll get <tt>params[:company]</tt> as <tt>{ :name => "acme", "address" => "123 Carrot Street" }</tt>.

还有，如果你已经在初始化中打开了 +config.wrap_parameters+ ，或者在控制器中调用 +wrap_parameters+ ，你可以安全地 omit the root element in the JSON/XML parameter. The parameters will be cloned and wrapped in the key according to your controller's name by default. So the above parameter can be written as:

<pre>
{ "name": "acme", "address": "123 Carrot Street" }
</pre>

And assume that you're sending the data to +CompaniesController+, it would then be wrapped in +:company+ key like this:

<ruby>
{ :name => "acme", :address => "123 Carrot Street", :company => { :name => "acme", :address => "123 Carrot Street" }}
</ruby>

You can customize the name of the key or specific parameters you want to wrap by consulting the "API documentation":http://api.rubyonrails.org/classes/ActionController/ParamsWrapper.html

h4. 路由参数

The +params+ hash will always contain the +:controller+ and +:action+ keys, but you should use the methods +controller_name+ and +action_name+ instead to access these values. Any other parameters defined by the routing, such as +:id+ will also be available. As an example, consider a listing of clients where the list can show either active or inactive clients. We can add a route which captures the +:status+ parameter in a "pretty" URL:

<ruby>
match '/clients/:status' => 'clients#index', :foo => "bar"
</ruby>

这种情况下，当用户打开 URL +/clients/active+ ， +params[:status]+ 会设置成 "active" 。使用这个路由时，, +params[:foo]+ will also be set to "bar" just like it was passed in the query string. In the same way +params[:action]+ will contain "index".

h4. +default_url_options+

你可以设置全局默认参数 that will be used when generating URLs with +default_url_options+. To do this, define a method with that name in your controller:

<ruby>
class ApplicationController < ActionController::Base
  # The options parameter is the hash passed in to 'url_for'
  def default_url_options(options)
    {:locale => I18n.locale}
  end
end
</ruby>

这些选项 will be used as a starting-point when generating URLs, so it's possible they'll be overridden by +url_for+. Because this method is defined in the controller, you can define it on +ApplicationController+ so it would be used for all URL generation, or you could define it on only one controller for all URLs generated there.


h3. 会话

你的应用程序为每个用户提供了一个Session，你可以在其中保存少量数据，在前后多次请求时保持一致。Session仅在控制器和视图中有效，可以使用以下存储机制：

* CookieStore - 在客户端保存所有东西
* DRbStore - 在 DRb 服务器上保存数据
* MemCacheStore - 在内存缓冲中保存数据
* ActiveRecordStore - 使用 Active Record 在数据库中保存数据

All session stores use a cookie to store a unique ID for each session (你必须启用。，因为较不安全， Rails 不允许你在URL中忽略会话ID）。

For most stores this ID is used to look up the session data on the server, e.g. in a database table. There is one exception, and that is the default and recommended session store - the CookieStore - which stores all session data in the cookie itself (the ID is still available to you if you need it). This has the advantage of being very lightweight and it requires zero setup in a new application in order to use the session. The cookie data is cryptographically signed to make it tamper-proof, but it is not encrypted, so anyone with access to it can read its contents but not edit it (Rails will not accept it if it has been edited).

The CookieStore can store around 4kB of data -- much less than the others -- but this is usually enough. Storing large amounts of data in the session is discouraged no matter which session store your application uses. You should especially avoid storing complex objects (anything other than basic Ruby objects, the most common example being model instances) in the session, as the server might not be able to reassemble them between requests, which will result in an error.

Read more about session storage in the "Security Guide":security.html.

如果你需要不同的会话存储机制，你可以 +config/initializers/session_store.rb+ 文件中修改：

<ruby>
# Use the database for sessions instead of the cookie-based default,
# which shouldn't be used to store highly confidential information
# (create the session table with "script/rails g session_migration")
# YourApp::Application.config.session_store :active_record_store
</ruby>

Rails sets up a session key (the name of the cookie) when signing the session data. 也可以在 +config/initializers/session_store.rb+ 中修改：

<ruby>
# Be sure to restart your server when you modify this file.

YourApp::Application.config.session_store :cookie_store, :key => '_your_app_session'
</ruby>

You can also pass a +:domain+ key and specify the domain name for the cookie:

<ruby>
# Be sure to restart your server when you modify this file.

YourApp::Application.config.session_store :cookie_store, :key => '_your_app_session', :domain => ".example.com"
</ruby>

Rails sets up (for the CookieStore) a secret key used for signing the session data. This can be changed in +config/initializers/secret_token.rb+

<ruby>
# Be sure to restart your server when you modify this file.

# Your secret key for verifying the integrity of signed cookies.
# If you change this key, all old signed cookies will become invalid!
# Make sure the secret is at least 30 characters and all random,
# no regular words or you'll be exposed to dictionary attacks.
YourApp::Application.config.secret_token = '49d3f3de9ed86c74b94ad6bd0...'
</ruby>

NOTE: Changing the secret when using the +CookieStore+ will invalidate all existing sessions.

h4. 访问 Session

在控制器中，你可以通过 +session+ 实例方法访问 session。

NOTE: Sessions are lazily loaded. If you don't access sessions in your action's code, they will not be loaded. Hence you will never need to disable sessions, just not accessing them will do the job.

Session values are stored using key/value pairs like a hash:

<ruby>
class ApplicationController < ActionController::Base

  private

  # Finds the User with the ID stored in the session with the key
  # :current_user_id This is a common way to handle user login in
  # a Rails application; logging in sets the session value and
  # logging out removes it.
  def current_user
    @_current_user ||= session[:current_user_id] &&
      User.find_by_id(session[:current_user_id])
  end
end
</ruby>

To store something in the session, just assign it to the key like a hash:

<ruby>
class LoginsController < ApplicationController
  # "Create" a login, aka "log the user in"
  def create
    if user = User.authenticate(params[:username], params[:password])
      # Save the user ID in the session so it can be used in
      # subsequent requests
      session[:current_user_id] = user.id
      redirect_to root_url
    end
  end
end
</ruby>

想在Session中删除些什么东西，把它们赋值为 +nil+ ：

<ruby>
class LoginsController < ApplicationController
  # "Delete" a login, aka "log the user out"
  def destroy
    # Remove the user id from the session
    @_current_user = session[:current_user_id] = nil
    redirect_to root_url
  end
end
</ruby>

To reset the entire session, use +reset_session+.

h4. The Flash

Flash是Session中的一个特殊部分，每次请求时都会被清除。这意味着存储的值在下次请求时就不再有效，这用在保存出错信息等方面很有用。它使用和Session相同的访问方式，比如 a hash. Let's use the act of logging out as an example. The controller can send a message which will be displayed to the user on the next request:

<ruby>
class LoginsController < ApplicationController
  def destroy
    session[:current_user_id] = nil
    flash[:notice] = "You have successfully logged out"
    redirect_to root_url
  end
end
</ruby>

Note it is also possible to assign a flash message as part of the redirection.

<ruby>
redirect_to root_url, :notice => "You have successfully logged out"
</ruby>


+destroy+ action 重定向至应用程序的 +root_url+ ，where the message will be displayed. Note that it's entirely up to the next action to decide what, if anything, it will do with what the previous action put in the flash. It's conventional to display eventual errors or notices from the flash in the application's layout:

<ruby>
<html>
  <!-- <head/> -->
  <body>
    <% if flash[:notice] %>
      <p class="notice"><%= flash[:notice] %></p>
    <% end %>
    <% if flash[:error] %>
      <p class="error"><%= flash[:error] %></p>
    <% end %>
    <!-- more content -->
  </body>
</html>
</ruby>

This way, if an action sets an error or a notice message, the layout will display it automatically.

If you want a flash value to be carried over to another request, use the +keep+ method:

<ruby>
class MainController < ApplicationController
  # Let's say this action corresponds to root_url, but you want
  # all requests here to be redirected to UsersController#index.
  # If an action sets the flash and redirects here, the values
  # would normally be lost when another redirect happens, but you
  # can use 'keep' to make it persist for another request.
  def index
    # Will persist all flash values.
    flash.keep

    # You can also use a key to keep only some kind of value.
    # flash.keep(:notice)
    redirect_to users_url
  end
end
</ruby>

h5. +flash.now+

By default, adding values to the flash will make them available to the next request, but sometimes you may want to access those values in the same request. For example, if the +create+ action fails to save a resource and you render the +new+ template directly, that's not going to result in a new request, but you may still want to display a message using the flash. To do this, you can use +flash.now+ in the same way you use the normal +flash+:

<ruby>
class ClientsController < ApplicationController
  def create
    @client = Client.new(params[:client])
    if @client.save
      # ...
    else
      flash.now[:error] = "Could not save client"
      render :action => "new"
    end
  end
end
</ruby>

h3. Cookies

你的应用程序可以在客户端保存少量数据 -- 称为 cookies -- that will be persisted across requests and even sessions. Rails provides easy access to cookies via the +cookies+ method, which -- much like the +session+ -- works like a hash:

<ruby>
class CommentsController < ApplicationController
  def new
    # Auto-fill the commenter's name if it has been stored in a cookie
    @comment = Comment.new(:name => cookies[:commenter_name])
  end

  def create
    @comment = Comment.new(params[:comment])
    if @comment.save
      flash[:notice] = "Thanks for your comment!"
      if params[:remember_name]
        # Remember the commenter's name.
        cookies[:commenter_name] = @comment.name
      else
        # Delete cookie for the commenter's name cookie, if any.
        cookies.delete(:commenter_name)
      end
      redirect_to @comment.article
    else
      render :action => "new"
    end
  end
end
</ruby>

Note that while for session values you set the key to +nil+, to delete a cookie value you should use +cookies.delete(:key)+.

h3. 渲染 xml 和 json 数据

ActionController 使渲染 +xml+ 或者 +json+ 数据变得很容易。如果你使用脚手架生成了一个控制器，看起来象这样：

<ruby>
class UsersController < ApplicationController
  def index
    @users = User.all
    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @users}
      format.json { render :json => @users}
    end
  end
end
</ruby>

Notice that in the above case code is <tt>render :xml => @users</tt> and not <tt>render :xml => @users.to_xml</tt>. 那是因为如果输入不是字符串， rails 会自动地 invokes +to_xml+ .


h3. 过滤器

过滤是在一个控制器Action之前、之后或者“包围”运行的方法。

过滤器可以被继承，所以如果你在 +ApplicationController+ 设置了过滤器，它会在应用程序中的每个控制器中运行。

前置过滤器可以暂停请求圈。一个常见的前置过滤器是要求用户登陆，以进行后续操作。你可以这样定义过滤器方法：

<ruby>
class ApplicationController < ActionController::Base
  before_filter :require_login

  private

  def require_login
    unless logged_in?
      flash[:error] = "You must be logged in to access this section"
      redirect_to new_login_url # halts request cycle
    end
  end

  # The logged_in? method simply returns true if the user is logged
  # in and false otherwise. It does this by "booleanizing" the
  # current_user method we created previously using a double ! operator.
  # Note that this is not common in Ruby and is discouraged unless you
  # really mean to convert something into true or false.
  def logged_in?
    !!current_user
  end
end
</ruby>

如果用户没有登陆，这个方法简单地在flash中存储了一条出错消息并重定向到登陆表单。如果前置过滤器渲染或者重定向了，Action就不会运行。 If there are additional filters scheduled to run after that filter they are also cancelled.

本例中，过滤器被加入 +ApplicationController+ ，这样应用程序中所有的控制器都继承了它。这样会使应用程序中的所有事情都要求用户登陆后才能使用。For obvious reasons (the user wouldn't be able to log in in the first place!), not all controllers or actions should require this. You can prevent this filter from running before particular actions with +skip_before_filter+:

<ruby>
class LoginsController < ApplicationController
  skip_before_filter :require_login, :only => [:new, :create]
end
</ruby>

现在， +LoginsController+ 的 +new+ 和 +create+ actions 会象之前那样工作，而不会要求用户登陆。 +:only+ 选项用于 to only skip this filter for these actions, and there is also an +:except+ option which works the other way. These options can be used when adding filters too, so you can add a filter which only runs for selected actions in the first place.

h4. 后置过滤器和 Around 过滤器

In addition to before filters, you can also run filters after an action has been executed, or both before and after.

后置过滤器和前置过滤器相似，但是因为Action已经运行完成， they have access to the response data that's about to be sent to the client. Obviously, after filters cannot stop the action from running.

Around filters are responsible for running their associated actions by yielding, similar to how Rack middlewares work.

For example, in a website where changes have an approval workflow an administrator could be able to preview them easily, just apply them within a transaction:

<ruby>
class ChangesController < ActionController::Base
  around_filter :wrap_in_transaction, :only => :show

  private

  def wrap_in_transaction
    ActiveRecord::Base.transaction do
      begin
        yield
      ensure
        raise ActiveRecord::Rollback
      end
    end
  end
end
</ruby>

Note that an around filter wraps also rendering. In particular, if in the example above the view itself reads from the database via a scope or whatever, it will do so within the transaction and thus present the data to preview.

They can choose not to yield and build the response themselves, in which case the action is not run.

h4. 过滤器的其它使用方法

While the most common way to use filters is by creating private methods and using *_filter to add them, there are two other ways to do the same thing.

The first is to use a block directly with the *_filter methods. The block receives the controller as an argument, and the +require_login+ filter from above could be rewritten to use a block:

<ruby>
class ApplicationController < ActionController::Base
  before_filter do |controller|
    redirect_to new_login_url unless controller.send(:logged_in?)
  end
end
</ruby>

Note that the filter in this case uses +send+ because the +logged_in?+ method is private and the filter is not run in the scope of the controller. This is not the recommended way to implement this particular filter, but in more simple cases it might be useful.

The second way is to use a class (actually, any object that responds to the right methods will do) to handle the filtering. This is useful in cases that are more complex and can not be implemented in a readable and reusable way using the two other methods. As an example, you could rewrite the login filter again to use a class:

<ruby>
class ApplicationController < ActionController::Base
  before_filter LoginFilter
end

class LoginFilter
  def self.filter(controller)
    unless controller.send(:logged_in?)
      controller.flash[:error] = "You must be logged in"
      controller.redirect_to controller.new_login_url
    end
  end
end
</ruby>

Again, this is not an ideal example for this filter, because it's not run in the scope of the controller but gets the controller passed as an argument. The filter class has a class method +filter+ which gets run before or after the action, depending on if it's a before or after filter. Classes used as around filters can also use the same +filter+ method, which will get run in the same way. The method must +yield+ to execute the action. Alternatively, it can have both a +before+ and an +after+ method that are run before and after the action.

h3. Request Forgery Protection

Cross-site request forgery 是一种攻击 in which a site tricks a user into making requests on another site, possibly adding, modifying or deleting data on that site without the user's knowledge or permission.

避免这个的第一步是保证所有的 "destructive" actions （创建、更新和销毁）只能通过“非GET”请求访问。 如果你遵守了 RESTful 规范，就已经做到了这一点。然而，一个 malicious 网站 can still send a non-GET request to your site quite easily, and that's where the request forgery protection comes in. As the name says, it protects from forged requests.

The way this is done is to add a non-guessable token which is only known to your server to each request. This way, if a request comes in without the proper token, it will be denied access.

如果你这样生成一个表单：

<ruby>
<%= form_for @user do |f| %>
  <%= f.text_field :username %>
  <%= f.text_field :password %>
<% end %>
</ruby>

You will see how the token gets added as a hidden field:

<html>
<form accept-charset="UTF-8" action="/users/1" method="post">
<input type="hidden"
       value="67250ab105eb5ad10851c00a5621854a23af5489"
       name="authenticity_token"/>
<!-- fields -->
</form>
</html>

Rails adds this token to every form that's generated using the "form helpers":form_helpers.html, so most of the time you don't have to worry about it. If you're writing a form manually or need to add the token for another reason, it's available through the method +form_authenticity_token+:

The +form_authenticity_token+ generates a valid authentication token. That's useful in places where Rails does not add it automatically, like in custom Ajax calls.

The "Security Guide":security.html has more about this and a lot of other security-related issues that you should be aware of when developing a web application.

h3. 请求和响应对象

每个控制器中，there are two accessor methods pointing to the request and the response objects associated with the request cycle that is currently in execution. The +request+ method contains an instance of +AbstractRequest+ and the +response+ method returns a response object representing what is going to be sent back to the client.

h4.  +request+ 对象

+request+对象包括了很多关于从客户端传入请求的有用信息。要得到可用方法的完整列表，请查看 "API 文档":http://api.rubyonrails.org/classes/ActionDispatch/Request.html 。 Among the properties that you can access on this object are:

|_.Property of +request+|_.Purpose|
|host|The hostname used for this request.|
|domain(n=2)|The hostname's first +n+ segments, starting from the right (the TLD).|
|format|The content type requested by the client.|
|method|The HTTP method used for the request.|
|get?, post?, put?, delete?, head?|Returns true if the HTTP method is GET/POST/PUT/DELETE/HEAD.|
|headers|Returns a hash containing the headers associated with the request.|
|port|The port number (integer) used for the request.|
|protocol|Returns a string containing the protocol used plus "://", for example "http://".|
|query_string|The query string part of the URL, i.e., everything after "?".|
|remote_ip|The IP address of the client.|
|url|The entire URL used for the request.|

h5. +path_parameters+, +query_parameters+, and +request_parameters+

Rails collects all of the parameters sent along with the request in the +params+ hash, whether they are sent as part of the query string or the post body. The request object has three accessors that give you access to these parameters depending on where they came from. The +query_parameters+ hash contains parameters that were sent as part of the query string while the +request_parameters+ hash contains parameters sent as part of the post body. The +path_parameters+ hash contains parameters that were recognized by the routing as being part of the path leading to this particular controller and action.

h4. The +response+ 对象

The response object is not usually used directly, but is built up during the execution of the action and rendering of the data that is being sent back to the user, but sometimes - like in an after filter - it can be useful to access the response directly. Some of these accessor methods also have setters, allowing you to change their values.

|_.Property of +response+|_.Purpose|
|body|This is the string of data being sent back to the client. This is most often HTML.|
|status|The HTTP status code for the response, like 200 for a successful request or 404 for file not found.|
|location|The URL the client is being redirected to, if any.|
|content_type|The content type of the response.|
|charset|The character set being used for the response. Default is "utf-8".|
|headers|Headers used for the response.|

h5. Setting Custom Headers

If you want to set custom headers for a response then +response.headers+ is the place to do it. The headers attribute is a hash which maps header names to their values, and Rails will set some of them automatically. If you want to add or change a header, just assign it to +response.headers+ this way:

<ruby>
response.headers["Content-Type"] = "application/pdf"
</ruby>

h3. HTTP 认证

Rails 内建了两种 HTTP 认证机制：

* 基本认证
* Digest 认证

h4. HTTP 基本认证

HTTP 基本认证是一种由大多数浏览器和其它 HTTP 客户端支持的认证方案。例如， consider an administration section which will only be available by entering a username and a password into the browser's HTTP basic dialog window. 使用内置的方案很容易，只需要使用一个方法： +http_basic_authenticate_with+ 。

<ruby>
class AdminController < ApplicationController
  http_basic_authenticate_with :name => "humbaba", :password => "5baa61e4"
end
</ruby>

With this in place, you can create namespaced controllers that inherit from +AdminController+. The filter will thus be run for all actions in those controllers, protecting them with HTTP basic authentication.

h4. HTTP Digest 认证

HTTP digest authentication is superior to the basic authentication as it does not require the client to send an unencrypted password over the network (though HTTP basic authentication is safe over HTTPS). Using digest authentication with Rails is quite easy and only requires using one method, +authenticate_or_request_with_http_digest+.

<ruby>
class AdminController < ApplicationController
  USERS = { "lifo" => "world" }

  before_filter :authenticate

  private

  def authenticate
    authenticate_or_request_with_http_digest do |username|
      USERS[username]
    end
  end
end
</ruby>

以上例子中， +authenticate_or_request_with_http_digest+ 块只有一个参数 - 用户名。块返回密码。返回 +false+ 或者 +nil+ from the +authenticate_or_request_with_http_digest+ 会引发认证失败。

h3. 流和文件下载

有时不是渲染HTML页面，而是向用户发送文件。Rails中所有控制器都拥有 +send_data+ 和 +send_file+ 方法， 都可以向客户端发送数据流。 +send_file+ is a convenience method that lets you provide the name of a file on the disk and it will stream the contents of that file for you.

To stream data to the client, use +send_data+:

<ruby>
require "prawn"
class ClientsController < ApplicationController
  # Generates a PDF document with information on the client and
  # returns it. The user will get the PDF as a file download.
  def download_pdf
    client = Client.find(params[:id])
    send_data generate_pdf(client),
              :filename => "#{client.name}.pdf",
              :type => "application/pdf"
  end

  private

  def generate_pdf(client)
    Prawn::Document.new do
      text client.name, :align => :center
      text "Address: #{client.address}"
      text "Email: #{client.email}"
    end.render
  end
end
</ruby>

以上例子中的 +download_pdf+ Action 会调用一个私有方法来真正地生成 PDF 文档，并以字符串返回。This string will then be streamed to the client as a file download and a filename will be suggested to the user. Sometimes when streaming files to the user, you may not want them to download the file. Take images, for example, which can be embedded into HTML pages. To tell the browser a file is not meant to be downloaded, you can set the +:disposition+ option to "inline". The opposite and default value for this option is "attachment".

h4. 发送文件

发送磁盘上已有的文件，可以使用 +send_file+ 方法。

<ruby>
class ClientsController < ApplicationController
  # Stream a file that has already been generated and stored on disk.
  def download_pdf
    client = Client.find(params[:id])
    send_file("#{Rails.root}/files/clients/#{client.id}.pdf",
              :filename => "#{client.name}.pdf",
              :type => "application/pdf")
  end
end
</ruby>

这个方法每次读取文件的 4kB，而不是一次性把整个文件载入内存。 You can turn off streaming with the +:stream+ option or adjust the block size with the +:buffer_size+ option.

If +:type+ is not specified, it will be guessed from the file extension specified in +:filename+. If the content type is not registered for the extension, <tt>application/octet-stream</tt> will be used.

WARNING: Be careful when using data coming from the client (params, cookies, etc.) to locate the file on disk, 这里存在着安全风险 that might allow someone to gain access to files they are not meant to see.

TIP: 不推荐你通过Rails的流传输静态文件，如果允许，你可以把它们放在网页服务器的公用文件夹下。。It is much more efficient to let the user download the file directly using Apache or another web server, keeping the request from unnecessarily going through the whole Rails stack.

h4. RESTful 下载

While +send_data+ works just fine, if you are creating a RESTful application having separate actions for file downloads is usually not necessary. In REST terminology, the PDF file from the example above can be considered just another representation of the client resource. Rails provides an easy and quite sleek way of doing "RESTful downloads". Here's how you can rewrite the example so that the PDF download is a part of the +show+ action, without any streaming:

<ruby>
class ClientsController < ApplicationController
  # The user can request to receive this resource as HTML or PDF.
  def show
    @client = Client.find(params[:id])

    respond_to do |format|
      format.html
      format.pdf { render :pdf => generate_pdf(@client) }
    end
  end
end
</ruby>

In order for this example to work, you have to add the PDF MIME type to Rails. This can be done by adding the following line to the file +config/initializers/mime_types.rb+:

<ruby>
Mime::Type.register "application/pdf", :pdf
</ruby>

NOTE: Configuration files are not reloaded on each request, so you have to restart the server in order for their changes to take effect.

Now the user can request to get a PDF version of a client just by adding ".pdf" to the URL:

<shell>
GET /clients/1.pdf
</shell>

h3. Parameter Filtering

Rails 为每种环境在 +log+ 目录下保存一个日志文件。These are extremely useful when debugging what's actually going on in your application, but in a live application you may not want every bit of information to be stored in the log file. You can filter certain request parameters from your log files by appending them to <tt>config.filter_parameters</tt> in the application configuration. These parameters will be marked [FILTERED] in the log.

<ruby>
config.filter_parameters << :password
</ruby>

h3. 安全

你的应用程序可以有缺陷，或者其它情况下，应用程序会抛出需要处理的异常。例如，如果用户 follows a link to a resource that no longer exists in the database, Active Record 会抛出 +ActiveRecord::RecordNotFound+ 异常。

Rails默认的异常处理会对所有的异常显示 "500 Server Error" 。 If the request was made locally, a nice traceback and some added information gets displayed so you can figure out what went wrong and deal with it. If the request was remote Rails will just display a simple "500 Server Error" message to the user, or a "404 Not Found" if there was a routing error or a record could not be found. Sometimes you might want to customize how these errors are caught and how they're displayed to the user. There are several levels of exception handling available in a Rails application:

h4. 默认的 500 和 404 模板

By default a production application will render either a 404 or a 500 error message. 这些信息包含在 +public+ 目录的静态 HTML 文件中，分别是 +404.html+ 和 +500.html+ 。 你可以定制这些文件，加入一些额外的信息和布局，但是记住，它们是静态的；也就是说，你不能在它们中使用 RHTML 或者布局，而只能是纯 HTML。

h4. +rescue_from+

If you want to do something a bit more elaborate when catching errors, you can use +rescue_from+, which handles exceptions of a certain type (or multiple types) in an entire controller and its subclasses.

When an exception occurs which is caught by a +rescue_from+ directive, the exception object is passed to the handler. The handler can be a method or a +Proc+ object passed to the +:with+ option. You can also use a block directly instead of an explicit +Proc+ object.

Here's how you can use +rescue_from+ to intercept all +ActiveRecord::RecordNotFound+ errors and do something with them.

<ruby>
class ApplicationController < ActionController::Base
  rescue_from ActiveRecord::RecordNotFound, :with => :record_not_found

  private

  def record_not_found
    render :text => "404 Not Found", :status => 404
  end
end
</ruby>

当然，这个例子 is anything but elaborate and doesn't improve on the default exception handling at all, but once you can catch all those exceptions you're free to do whatever you want with them. For example, you could create custom exception classes that will be thrown when a user doesn't have access to a certain section of your application:

<ruby>
class ApplicationController < ActionController::Base
  rescue_from User::NotAuthorized, :with => :user_not_authorized

  private

  def user_not_authorized
    flash[:error] = "You don't have access to this section."
    redirect_to :back
  end
end

class ClientsController < ApplicationController
  # Check that the user has the right authorization to access clients.
  before_filter :check_authorization

  # Note how the actions don't have to worry about all the auth stuff.
  def edit
    @client = Client.find(params[:id])
  end

  private

  # If the user is not authorized, just throw the exception.
  def check_authorization
    raise User::NotAuthorized unless current_user.admin?
  end
end
</ruby>

NOTE: Certain exceptions are only rescuable from the +ApplicationController+ class, as they are raised before the controller gets initialized and the action gets executed. See Pratik Naik's "article":http://m.onkey.org/2008/7/20/rescue-from-dispatching on the subject for more information.

h3. 强制使用 HTTPS 协议

有时你可能出于安全考虑，希望特定的控制器只能通过HTTPS协议访问。从 Rails 3.1 开始，你现在可以在控制器使用 +force_ssl+ 方法来强制做到这点：

<ruby>
class DinnerController
  force_ssl
end
</ruby>

就象过滤器，你也可以 passing +:only+ and +:except+ to enforce the secure connection only to specific actions.

<ruby>
class DinnerController
  force_ssl :only => :cheeseburger
  # or
  force_ssl :except => :cheeseburger
end
</ruby>

请注意 that if you found yourself adding +force_ssl+ to many controllers, you may found yourself wanting to force the whole application to use HTTPS instead. 这时，你可以在你的环境文件中设置 +config.force_ssl+ 。
h2. Rails 插件创建基础

 Rails 插件要么是一个扩展，要么是对核心框架的修改。插件提供了：

* 开发者可以分享超前的想法，而不会影响稳定的基本代码
* 积木化的体系结构，代码单元可以按它们自己的发行时间表修正或升级
* 解放了核心开发者的途径，使他们可以不必在核心中包括每个超酷的特性

阅读本指南后，你将会熟悉：

* 从头开始创建一个插件
* 编写和运行插件的测试

本篇描述了如何创建测试驱动的插件，它可以：

* 扩展核心的Ruby类，例如哈希和字符串
* 在传统的 'acts_as' 插件中，向ActiveRecord::Base加入方法
* 告诉你如何在你的插件放置生成器

For the purpose of this guide pretend for a moment that you are an avid bird watcher.
Your favorite bird is the Yaffle，你希望创建一个插件，让其它开发能够分享 Yaffle 的优良品质。

endprologue.

h3. Setup

在开始前，花一点时间确定你的新插件是否可能会在不同的 Rails 应用程序间共享。

* 如果你的插件仅限于你的应用程序，你的新插件将是一个 _vendored plugin_ 。
* 如果你认为你的插件会在不同的应用程序间通用，build it as a _gemified plugin_.

h4. 要么产生一个 vendored 插件...

在你Rails的根目录下使用 +rails generate plugin+ 命令，会在 +vendor/plugins+ 目录中创建一个新的插件。查看用法和选项的帮助：

<shell>
$ rails generate plugin --help
</shell>

h4. 或者产生一个 gem 化的插件。

以 gem 的方法编写你的插件，而不是 vendored 插件，让你的插件可以使用 RubyGems 和 Bundler 在不同的rails应用程序间分享。 

Rails 3.1 带来了 +rails plugin new+ 命令，这可以创建开发任何Rails扩展的骨架， with the ability to run ntegration tests using a dummy Rails application. 查看帮助了解用法和选项：

<shell>
$ rails plugin --help
</shell>

h3. 测试你新生成的插件

你可以进入插件目录，运行 +bundle install+ 命令， 运行 +rake+ 命令以进行一个已生成的测试。

你会看到：

<shell>
	2 tests, 2 assertions, 0 failures, 0 errors, 0 skips
</shell>

这告诉你，所有的东西都已正确地生成，你现在可以添加功能了。

h3. 扩展核心类

本节将讲解如何向字符串类加入方法，这将在你的 Rails 应用程序中随处可用。

本例中，你将向字符串加入名为 +to_squawk+ 的方法。开始时，先创建带有一些断言的新的测试文件：

<ruby>
# yaffle/test/core_ext_test.rb

require 'test_helper'

class CoreExtTest < Test::Unit::TestCase
  def test_to_squawk_prepends_the_word_squawk
    assert_equal "squawk! Hello World", "Hello World".to_squawk
  end
end
</ruby>

使用 +rake+ 运行测试。 这项测试失败，因为我们还没有实现 +to_squawk+ 方法：

<shell>
	  1) Error:
	test_to_squawk_prepends_the_word_squawk(CoreExtTest):
	NoMethodError: undefined method `to_squawk' for "Hello World":String
	    test/core_ext_test.rb:5:in `test_to_squawk_prepends_the_word_squawk'
</shell>

很好 - 现在你可以开始开发了。

在 +lib/yaffle.rb+ require +lib/core_ext+ 中：

<ruby>
# yaffle/lib/yaffle.rb

require "yaffle/core_ext"

module Yaffle
end
</ruby>

最后，创建 +core_ext.rb+ 文件并加入 +to_squawk+ 方法：

<ruby>
# yaffle/lib/yaffle/core_ext.rb

String.class_eval do
  def to_squawk
    "squawk! #{self}".strip
  end
end
</ruby>

To test that your method does what it says it does, 在你的插件目录使用 +rake+ 运行单元测试。

<shell>
	3 tests, 3 assertions, 0 failures, 0 errors, 0 skips
</shell>

要看到效果，请进入 test/dummy directory 目录，启动控制台，运行 squawking ：

<shell>
$ rails console
>> "Hello World".to_squawk
=> "squawk! Hello World"
</shell>

h3. 向 Active Record 中加入 "acts_as" 方法

插件的通用做法，是向模型中加入 'acts_as_something' 方法。这种情况下， you want to 在你的Active Record模型中 write a method called 'acts_as_yaffle' that adds a 'squawk' method。

开始前，准备好你需要的文件：

<ruby>
# yaffle/test/acts_as_yaffle_test.rb

require 'test_helper'

class ActsAsYaffleTest < Test::Unit::TestCase
end
</ruby>

<ruby>
# yaffle/lib/yaffle.rb

require "yaffle/core_ext"
require 'yaffle/acts_as_yaffle'

module Yaffle
end
</ruby>

<ruby>
# yaffle/lib/yaffle/acts_as_yaffle.rb

module Yaffle
  module ActsAsYaffle
    # your code will go here
  end
end
</ruby>

h4. 添加类方法

This plugin will expect that you've added a method to your model named 'last_squawk'. 然而，插件的用户可能已经为了其它目的，在他们的模型中定义了名为 'last_squawk' 的方法。 This plugin will allow the name to be changed by adding a class method called 'yaffle_text_field'.

To start out, write a failing test that shows the behavior you'd like:

<ruby>
# yaffle/test/acts_as_yaffle_test.rb

require 'test_helper'

class ActsAsYaffleTest < Test::Unit::TestCase

  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk
    assert_equal "last_squawk", Hickwall.yaffle_text_field
  end

  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet
    assert_equal "last_tweet", Wickwall.yaffle_text_field
  end

end
</ruby>

运行 +rake+ ，你会看到：

<shell>
	  1) Error:
	test_a_hickwalls_yaffle_text_field_should_be_last_squawk(ActsAsYaffleTest):
	NameError: uninitialized constant ActsAsYaffleTest::Hickwall
	    test/acts_as_yaffle_test.rb:6:in `test_a_hickwalls_yaffle_text_field_should_be_last_squawk'

	  2) Error:
	test_a_wickwalls_yaffle_text_field_should_be_last_tweet(ActsAsYaffleTest):
	NameError: uninitialized constant ActsAsYaffleTest::Wickwall
	    test/acts_as_yaffle_test.rb:10:in `test_a_wickwalls_yaffle_text_field_should_be_last_tweet'

	5 tests, 3 assertions, 0 failures, 2 errors, 0 skips
</shell>

这告诉我们， that we don't have the necessary models (Hickwall and Wickwall) that we are trying to test.我们可以轻易地生成这些模型 in our "dummy" Rails application by running the following commands from the test/dummy directory:

<shell>
$ cd test/dummy
$ rails generate model Hickwall last_squawk:string
$ rails generate model Wickwall last_squawk:string last_tweet:string
</shell>

现在你可以在你的测试数据库中创建所需的数据库表 by navigating to your dummy app ，迁移数据库。首先

<shell>
$ cd test/dummy
$ rake db:migrate
$ rake db:test:prepare
</shell>

While you are here, change the Hickwall and Wickwall models so that they know that they are supposed to act
like yaffles.

<ruby>
# test/dummy/app/models/hickwall.rb

class Hickwall < ActiveRecord::Base
  acts_as_yaffle
end

# test/dummy/app/models/wickwall.rb

class Wickwall < ActiveRecord::Base
  acts_as_yaffle :yaffle_text_field => :last_tweet
end

</ruby>

我们还可以加入代码，定义 acts_as_yaffle 方法。

<ruby>
# yaffle/lib/yaffle/acts_as_yaffle.rb
module Yaffle
  module ActsAsYaffle
    extend ActiveSupport::Concern

    included do
    end

    module ClassMethods
      def acts_as_yaffle(options = {})
        # your code will go here
      end
    end
  end
end

ActiveRecord::Base.send :include, Yaffle::ActsAsYaffle
</ruby>

现在你可以回到插件的主目录(+cd ../..+) ，再使用 +rake+ 测试。

<shell>
	  1) Error:
	test_a_hickwalls_yaffle_text_field_should_be_last_squawk(ActsAsYaffleTest):
	NoMethodError: undefined method `yaffle_text_field' for #<Class:0x000001016661b8>
	    /Users/xxx/.rvm/gems/ruby-1.9.2-p136@xxx/gems/activerecord-3.0.3/lib/active_record/base.rb:1008:in `method_missing'
	    test/acts_as_yaffle_test.rb:5:in `test_a_hickwalls_yaffle_text_field_should_be_last_squawk'

	  2) Error:
	test_a_wickwalls_yaffle_text_field_should_be_last_tweet(ActsAsYaffleTest):
	NoMethodError: undefined method `yaffle_text_field' for #<Class:0x00000101653748>
	    Users/xxx/.rvm/gems/ruby-1.9.2-p136@xxx/gems/activerecord-3.0.3/lib/active_record/base.rb:1008:in `method_missing'
	    test/acts_as_yaffle_test.rb:9:in `test_a_wickwalls_yaffle_text_field_should_be_last_tweet'

	5 tests, 3 assertions, 0 failures, 2 errors, 0 skips

</shell>

Getting closer... 现在我们要实现 acts_as_yaffle 方法的代码，好通过测试。

<ruby>
# yaffle/lib/yaffle/acts_as_yaffle.rb

module Yaffle
  module ActsAsYaffle
   extend ActiveSupport::Concern

    included do
    end

    module ClassMethods
      def acts_as_yaffle(options = {})
        cattr_accessor :yaffle_text_field
        self.yaffle_text_field = (options[:yaffle_text_field] || :last_squawk).to_s
      end
    end
  end
end

ActiveRecord::Base.send :include, Yaffle::ActsAsYaffle
</ruby>

运行 +rake+ ，你会看到通过了所有的测试：

<shell>
	5 tests, 5 assertions, 0 failures, 0 errors, 0 skips
</shell>

h4. 添加实例方法

插件将向任何Active Record对象加入调用'acts_as_yaffle'的名为 'squawk' 的方法。 这个 'squawk' 方法将 simply set the value of one of the fields in the database.

To start out, write a failing test that shows the behavior you'd like:

<ruby>
# yaffle/test/acts_as_yaffle_test.rb
require 'test_helper'

class ActsAsYaffleTest < Test::Unit::TestCase

  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk
    assert_equal "last_squawk", Hickwall.yaffle_text_field
  end

  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet
    assert_equal "last_tweet", Wickwall.yaffle_text_field
  end

  def test_hickwalls_squawk_should_populate_last_squawk
    hickwall = Hickwall.new
    hickwall.squawk("Hello World")
    assert_equal "squawk! Hello World", hickwall.last_squawk
  end

  def test_wickwalls_squawk_should_populate_last_tweet
    wickwall = Wickwall.new
    wickwall.squawk("Hello World")
    assert_equal "squawk! Hello World", wickwall.last_tweet
  end
end
</ruby>

运行测试，确认最后的两项测试失败，带有错误信息 "NoMethodError: undefined method `squawk'"， 更新 'acts_as_yaffle.rb' ，让它看来象这样：

<ruby>
# yaffle/lib/yaffle/acts_as_yaffle.rb	

module Yaffle
  module ActsAsYaffle
    extend ActiveSupport::Concern

    included do
    end

    module ClassMethods
      def acts_as_yaffle(options = {})
        cattr_accessor :yaffle_text_field
        self.yaffle_text_field = (options[:yaffle_text_field] || :last_squawk).to_s
      end
    end

    def squawk(string)
      write_attribute(self.class.yaffle_text_field, string.to_squawk)
    end

  end
end

ActiveRecord::Base.send :include, Yaffle::ActsAsYaffle
</ruby>

最后运行 +rake+ ，你会看到：

<shell>
	7 tests, 7 assertions, 0 failures, 0 errors, 0 skips
</shell>

NOTE: The use of +write_attribute+ to write to the field in model is just one example of how a plugin can interact with the model, and will not always be the right method to use. 例如，也可以使用 <tt>send("#{self.class.yaffle_text_field}=", string.to_squawk)</tt>.

h3. 生成器

Generators can be included in your gem simply by creating them in a lib/generators directory of your plugin. 可以在"Generators Guide"中找到更多有关创建生成器的信息：generators.html

h3. 发布你的 Gem

可以从任意的Git仓库共享正在开发的Gem插件。想要和他人共享 Yaffle gem ，只需简单地提交代码至一个 Git 仓库 (就像 Github) and add a line to the Gemfile of the application in question:

<ruby>
gem 'yaffle', :git => 'git://github.com/yaffle_watcher/yaffle.git'
</ruby>

运行 +bundle install+ 后，你的 gem 功能就会在应用程序中起作用了。

当 gem 可以正式发行时，可以公布到 "RubyGems":http://www.rubygems.org.
更多在RubyGems上公布gems的信息，请看： "http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html":http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html

h3. Non-Gem Plugins

Non-gem plugins are useful for functionality that won't be shared with another project. 在 vendor/plugins  目录下统一保管你自定义的功能，不会搞乱应用程序的其它部分。

Move the directory that you created for the gem based plugin into the vendor/plugins directory of a generated Rails application, create a vendor/plugins/yaffle/init.rb file that contains "require 'yaffle'" and everything will still work.

<ruby>
# yaffle/init.rb

require 'yaffle'
</ruby>

You can test this by changing to the Rails application that you added the plugin to and starting a rails console. 在控制台下，我们可以确认，字符串是否带有了实例方法  to_squawk ：

<shell>
$ cd my_app
$ rails console
$ "Rails plugins are easy!".to_squawk
</shell>

你也可以删除 .gemspec 、 Gemfile 和 Gemfile.lock 文件 as they will no longer be needed.

h3. RDoc 文档

一旦你的插件稳定and you are ready to deploy do everyone else a favor and document it! 幸运的是，为你的插件写文档是件很简单的活儿。

首先，用如何使用你的插件的详细信息，升级 README 文件。包含以下关键信息：

* 你的姓名
* 如何安装
* 如何在应用程序中加入功能 (一些用例)
* 警告， gotchas 或者使用技巧，这些将帮助用户，节约他们的时间

准备好 README 文件后，在rdoc开放者会使用到的方法中加入注释。 It's also customary to add '#:nodoc:' comments to those parts of the code that are not included in the public api.

准备好注释后，进入插件目录运行：

<shell>
$ rake rdoc
</shell>

h4. 参考资料

* "Developing a RubyGem using Bundler":https://github.com/radar/guides/blob/master/gem-development.md
* "Using Gemspecs As Intended":http://yehudakatz.com/2010/04/02/using-gemspecs-as-intended/
* "Gemspec Reference":http://docs.rubygems.org/read/chapter/20
* "GemPlugins":http://www.mbleigh.com/2008/06/11/gemplugins-a-brief-introduction-to-the-future-of-rails-plugins
* "Keeping init.rb thin":http://daddy.platte.name/2007/05/rails-plugins-keep-initrb-thin.html

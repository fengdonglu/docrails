h2. Rails 中的缓存：概述

This guide will teach you what you need to know about avoiding that expensive round-trip to your database and returning what you need to return to the web clients in the shortest time possible.

阅读本篇之后，你将会使用和配置：

* 页面、action和片段缓存
* Sweepers
* 可选的缓存存储
* Conditional GET support

endprologue.

h3. 缓存基础

这里介绍了Rails默认提供（不使用第三方插件）的三种缓存技术。

开始前，如果你运行在开发模式下，需要确认 +config.action_controller.perform_caching+ 选项已经设置成 +true+ 。这个选项通常在 +config/environments/*.rb+ 对应的地方，开发和测试模式的默认情况下，缓存是关闭的，而在生产模式中打开。

<ruby>
config.action_controller.perform_caching = true
</ruby>

h4. 页面缓存

页面缓存是一种 Rails 的机制，which allows the request for a generated page to be fulfilled by the webserver (i.e. Apache or nginx), without ever having to go through the Rails stack at all. 显然，很会很快。不幸的是，它不能应用于所有的场景（比如需要认证的页面），而且，因为网页服务器是线性地从文件系统中取得文件发布，缓存还要处理超期的问题。

你可以使用 +caches_page+ 方法激活页面缓存。

<ruby>
class ProductsController < ActionController

  caches_page :index

  def index
    @products = Products.all
  end
end
</ruby>

Let's say you have a controller called +ProductsController+ and an +index+ action that lists all the products. The first time anyone requests +/products+, Rails will generate a file called +products.html+ and the webserver will then look for that file before it passes the next request for +/products+ to your Rails application.

默认地，页面缓存目录设置为 +Rails.public_path+ （通常设置为 +public+ 文件夹） and this can be configured by changing the configuration setting +config.action_controller.page_cache_directory+. Changing the default from +public+ 可以避免命名冲突，因为你还要把其它静态网页存放在 +public+ ，但是改变这个 will require web server reconfiguration to let the web server know where to serve the cached files from.

页面缓存机制会自动地加入 +.html+ 扩展名 to requests for pages that do not have an extension to make it easy for the webserver to find those pages and this can be configured by changing the configuration setting +config.action_controller.page_cache_extension+.

为了让发布新产品时让页面超期，我们扩展了示例的控制器：

<ruby>
class ProductsController < ActionController

  caches_page :index

  def index
    @products = Products.all
  end

  def create
    expire_page :action => :index
  end

end
</ruby>

如果你希望建立更复杂的超期模式，你可以在修改时使用 cache sweepers 让缓存对象超期。这将在 Sweepers 小节讲述。

NOTE: 页面缓存会忽略所有的参数。例如， +/products?page=1+ will be written out to the filesystem as +products.html+ with no reference to the +page+ parameter. 因此，如果有人之后请求 +/products?page=2+ 页面，他们会得到被缓存的第一个页面。小心 when page caching GET parameters in the URL!

INFO: 页面缓存 runs in an after filter. Thus, invalid requests won't generate spurious cache entries as long as you halt them. Typically, a redirection in some before filter that checks request preconditions does the job.

h4. Action 缓存

One of the issues with Page Caching is that you cannot use it for pages that require to restrict access somehow. 这就是 Action 缓存的适用情形了。 Action Caching 就象页面缓存那样工作，除了 the incoming web request does go from the webserver to the Rails stack and Action Pack so that before filters can be run on it before the cache is served. 这就允许运行认证和其它约束 while still serving the result of the output from a cached copy.

Clearing the cache works in the exact same way as with Page Caching.

Let's say you only wanted authenticated users to call actions on +ProductsController+.

<ruby>
class ProductsController < ActionController

  before_filter :authenticate
  caches_action :index

  def index
    @products = Product.all
  end

  def create
    expire_action :action => :index
  end

end
</ruby>

你还可以使用 +:if+ (or +:unless+) to pass a Proc that specifies when the action should be cached. Also, you can use +:layout => false+ to cache without layout so that dynamic information in the layout such as logged in user info or the number of items in the cart can be left uncached. This feature is available as of Rails 2.2.

You can modify the default action cache path by passing a +:cache_path+ option. This will be passed directly to +ActionCachePath.path_for+. This is handy for actions with multiple possible routes that should be cached differently. If a block is given, it is called with the current controller instance.

最后，如果你使用 memcached 或者 Ehcache， you can also pass +:expires_in+. In fact, all parameters not used by +caches_action+ are sent to the underlying cache store.

INFO: Action 缓存运行在一个后置过滤器上。因此，无效的请求不会产生伪造的缓存实体 as long as you halt them. 典型地，在一些前置过滤器中的重定向 that checks request preconditions does the job.

h4. 片段缓存

Life would be perfect if we could get away with caching the entire contents of a page or action and serving it out to the world. Unfortunately, dynamic web applications usually build pages with a variety of components not all of which have the same caching characteristics. In order to address such a dynamically created page where different parts of the page need to be cached and expired differently, Rails provides a mechanism called Fragment Caching.

片段缓存 allows a fragment of view logic to be wrapped in a cache block and served out of the cache store when the next request comes in.

例如，如果你想实时在网站上显示所有的订单 and didn't want to cache that part of the page, but did want to cache the part of the page which lists all products available, you could use this piece of code:

<ruby>
<% Order.find_recent.each do |o| %>
  <%= o.buyer.name %> bought <%= o.product.name %>
<% end %>

<% cache do %>
  All available products:
  <% Product.all.each do |p| %>
    <%= link_to p.name, product_url(p) %>
  <% end %>
<% end %>
</ruby>

示例中的缓存代码块 will bind to the action that called it and is written out to the same place as the Action Cache, which means that if you want to cache multiple fragments per action, you should provide an +action_suffix+ to the cache call:

<ruby>
<% cache(:action => 'recent', :action_suffix => 'all_products') do %>
  All available products:
</ruby>

你可以象这样使用 +expire_fragment+ 方法让它超期：

<ruby>
expire_fragment(:controller => 'products', :action => 'recent', :action_suffix => 'all_products')
</ruby>

If you don't want the cache block to bind to the action that called it, You can also use globally keyed fragments by calling the +cache+ method with a key, like so:

<ruby>
<% cache('all_available_products') do %>
  All available products:
<% end %>
</ruby>

This fragment is then available to all actions in the +ProductsController+ using the key and can be expired the same way:

<ruby>
expire_fragment('all_available_products')
</ruby>

h4. Sweepers

Cache sweeping 是一种机制，允许你 to get around having a ton of +expire_{page,action,fragment}+ calls in your code. It does this by moving all the work required to expire cached content into an +ActionController::Caching::Sweeper+ subclass. This class is an observer and looks for changes to an object via callbacks, and when a change occurs it expires the caches associated with that object in an around or after filter.

继续我们的Product控制器例子，我们用sweeper重写：

<ruby>
class ProductSweeper < ActionController::Caching::Sweeper
  observe Product # This sweeper is going to keep an eye on the Product model

  # If our sweeper detects that a Product was created call this
  def after_create(product)
    expire_cache_for(product)
  end

  # If our sweeper detects that a Product was updated call this
  def after_update(product)
    expire_cache_for(product)
  end

  # If our sweeper detects that a Product was deleted call this
  def after_destroy(product)
    expire_cache_for(product)
  end

  private
  def expire_cache_for(product)
    # Expire the index page now that we added a new product
    expire_page(:controller => 'products', :action => 'index')

    # Expire a fragment
    expire_fragment('all_available_products')
  end
end
</ruby>

你会注意到 that the actual product gets passed to the sweeper, so if we were caching the edit action for each product, we could add an expire method which specifies the page we want to expire:

<ruby>
  expire_action(:controller => 'products', :action => 'edit', :id => product)
</ruby>

我们把这个加入控制器，让它调用 sweeper when certain actions are called. So, if we wanted to expire the cached content for the list and edit actions when the create action was called, we could do the following:

<ruby>
class ProductsController < ActionController

  before_filter :authenticate
  caches_action :index
  cache_sweeper :product_sweeper

  def index
    @products = Product.all
  end

end
</ruby>

h4. SQL 缓存

查询缓存是一种 Rails 功能，缓存了每次查询的结果集，所以如果 Rails 在请求中又碰到了同样的查询， it will use the cached result set as opposed to running the query against the database again.

例如：

<ruby>
class ProductsController < ActionController

  def index
    # Run a find query
    @products = Product.all

    ...

    # Run the same query again
    @products = Product.all
  end

end
</ruby>

第二次在数据库上执行同样的查询，它就不会去联系数据库。 The first time the result is returned from the query it is stored in the query cache (in memory) and the second time it's pulled from memory.

However, it's important to note that query caches are created at the start of an action and destroyed at the end of that action and thus persist only for the duration of the action. If you'd like to store query results in a more persistent fashion, you can in Rails by using low level caching.

h3. 缓存的存储

Rails 为action和片段缓存产生的数据提供了不同的存储方案。页面缓存总是存储在磁盘上。

h4. 配置

You can set up your application's default cache store by calling +config.cache_store=+ in the Application definition inside your +config/application.rb+ file or in an Application.configure block in an environment specific configuration file (i.e. +config/environments/*.rb+). The first argument will be the cache store to use and the rest of the argument will be passed as arguments to the cache store constructor.

<ruby>
config.cache_store = :memory_store
</ruby>

可选地，你可以在配置代码块之外，调用 +ActionController::Base.cache_store+ 。

你可以调用 +Rails.cache+ 访问缓存。

h4. ActiveSupport::Cache::Store

这个类提供了 the foundation for interacting with the cache in Rails. This is an abstract class and you cannot use it on its own. Rather you must use a concrete implementation of the class tied to a storage engine. Rails ships with several implementations documented below.

The main methods to call are +read+, +write+, +delete+, +exist?+, and +fetch+. The fetch method takes a block and will either return an existing value from the cache, or evaluate the block and write the result to the cache if no value exists.

有一些选项在所有的缓存中通用。 These can be passed to the constructor or the various methods to interact with entries.

* +:namespace+ - 这个选项 can be used to create a namespace within the cache store. It is especially useful if your application shares a cache with other applications. The default value will include the application name and Rails environment.

* +:compress+ - 这个选项 can be used to indicate that compression should be used in the cache. This can be useful for transferring large cache entries over a slow network.

* +:compress_threshold+ - 这个选项 is used in conjunction with the +:compress+ option to indicate a threshold under which cache entries should not be compressed. This defaults to 16 kilobytes.

* +:expires_in+ - This option sets an expiration time in seconds for the cache entry when it will be automatically removed from the cache.

* +:race_condition_ttl+ - This option is used in conjunction with the +:expires_in+ option. It will prevent race conditions when cache entries expire by preventing multiple processes from simultaneously regenerating the same entry (also known as the dog pile effect). This option sets the number of seconds that an expired entry can be reused while a new value is being regenerated. It's a good practice to set this value if you use the +:expires_in+ option.

h4. ActiveSupport::Cache::MemoryStore

This cache store keeps entries in memory in the same Ruby process. The cache store has a bounded size specified by the +:size+ options to the initializer (default is 32Mb). When the cache exceeds the allotted size, a cleanup will occur and the least recently used entries will be removed.

<ruby>
ActionController::Base.cache_store = :memory_store, :size => 64.megabytes
</ruby>

If you're running multiple Ruby on Rails server processes (which is the case if you're using mongrel_cluster or Phusion Passenger), then your Rails server process instances won't be able to share cache data with each other. This cache store is not appropriate for large application deployments, but can work well for small, low traffic sites with only a couple of server processes or for development and test environments.

This is the default cache store implementation.

h4. ActiveSupport::Cache::FileStore

This cache store uses the file system to store entries. The path to the directory where the store files will be stored must be specified when initializing the cache.

<ruby>
ActionController::Base.cache_store = :file_store, "/path/to/cache/directory"
</ruby>

With this cache store, multiple server processes on the same host can share a cache. Servers processes running on different hosts could share a cache by using a shared file system, but that set up would not be ideal and is not recommended. The cache store is appropriate for low to medium traffic sites that are served off one or two hosts.

Note that the cache will grow until the disk is full unless you periodically clear out old entries.

h4. ActiveSupport::Cache::MemCacheStore

This cache store uses Danga's +memcached+ server to provide a centralized cache for your application. Rails uses the bundled +memcached-client+ gem by default. This is currently the most popular cache store for production websites. It can be used to provide a single, shared cache cluster with very a high performance and redundancy.

When initializing the cache, you need to specify the addresses for all memcached servers in your cluster. If none is specified, it will assume memcached is running on the local host on the default port, but this is not an ideal set up for larger sites.

The +write+ and +fetch+ methods on this cache accept two additional options that take advantage of features specific to memcached. You can specify +:raw+ to send a value directly to the server with no serialization. The value must be a string or number. You can use memcached direct operation like +increment+ and +decrement+ only on raw values. You can also specify +:unless_exist+ if you don't want memcached to overwrite an existing entry.

<ruby>
ActionController::Base.cache_store = :mem_cache_store, "cache-1.example.com", "cache-2.example.com"
</ruby>

h4. ActiveSupport::Cache::EhcacheStore

如果你使用 JRuby ，你可以在应用程序中使用 Terracotta's Ehcache 作为缓存存储。 Ehcache 是一种开源的 Java 缓存，也提供了可动态提升、管理功能、商业支持的企业版本。 You must first install the jruby-ehcache-rails3 gem (version 1.1.0 or later) to use this cache store.

<ruby>
ActionController::Base.cache_store = :ehcache_store
</ruby>

当初始化缓存时， you may use the +:ehcache_config+ option to specify the Ehcache config file to use (where the default is "ehcache.xml" in your Rails config directory), and the :cache_name option to provide a custom name for your cache (the default is rails_cache).

In addition to the standard +:expires_in+ option, the +write+ method on this cache can also accept the additional  +:unless_exist+ option, which will cause the cache store to use Ehcache's +putIfAbsent+ method instead of +put+, and therefore will not overwrite an existing entry. Additionally, the +write+ method supports all of the properties exposed by the "Ehcache Element class":http://ehcache.org/apidocs/net/sf/ehcache/Element.html , including:

|_. Property |_. Argument Type |_. Description |
| elementEvictionData | ElementEvictionData | Sets this element's eviction data instance. |
| eternal | boolean | Sets whether the element is eternal. |
| timeToIdle, tti | int | Sets time to idle |
| timeToLive, ttl, expires_in | int | Sets time to Live |
| version | long | Sets the version attribute of the ElementAttributes object. |

These options are passed to the +write+ method as Hash options using either camelCase or underscore notation, as in the following examples:

<ruby>
Rails.cache.write('key', 'value', :time_to_idle => 60.seconds, :timeToLive => 600.seconds)
caches_action :index, :expires_in => 60.seconds, :unless_exist => true
</ruby>

For more information about Ehcache, see "http://ehcache.org/":http://ehcache.org/ .
For more information about Ehcache for JRuby and Rails, see "http://ehcache.org/documentation/jruby.html":http://ehcache.org/documentation/jruby.html

h4. 定制缓存存储

You can create your own custom cache store by simply extending +ActiveSupport::Cache::Store+ and implementing the appropriate methods. 用这种方法，你可以swap in any number of caching technologies into your Rails application.

要使用定制的缓存存储，只要简单地设置 cache store to a new instance of the class.

<ruby>
ActionController::Base.cache_store = MyCacheStore.new
</ruby>

h4. Cache Keys

The keys used in a cache can be any object that responds to either +:cache_key+ or to +:to_param+. You can implement the +:cache_key+ method on your classes if you need to generate custom keys. Active Record will generate keys based on the class name and record id.

You can use Hashes and Arrays of values as cache keys.

<ruby>
# This is a legal cache key
Rails.cache.read(:site => "mysite", :owners => [owner_1, owner_2])
</ruby>

The keys you use on +Rails.cache+ will not be the same as those actually used with the storage engine. They may be modified with a namespace or altered to fit technology backend constraints. This means, for instance, that you can't save values with +Rails.cache+ and then try to pull them out with the +memcache-client+ gem. However, you also don't need to worry about exceeding the memcached size limit or violating syntax rules.

h3. Conditional GET support

Conditional GETs are a feature of the HTTP specification that provide a way for web servers to tell browsers that the response to a GET request hasn't changed since the last request and can be safely pulled from the browser cache.

They work by using the +HTTP_IF_NONE_MATCH+ and +HTTP_IF_MODIFIED_SINCE+ headers to pass back and forth both a unique content identifier and the timestamp of when the content was last changed. If the browser makes a request where the content identifier (etag) or last modified since timestamp matches the server’s version then the server only needs to send back an empty response with a not modified status.

It is the server's (i.e. our) responsibility to look for a last modified timestamp and the if-none-match header and determine whether or not to send back the full response. With conditional-get support in Rails this is a pretty easy task:

<ruby>
class ProductsController < ApplicationController

  def show
    @product = Product.find(params[:id])

    # If the request is stale according to the given timestamp and etag value
    # (i.e. it needs to be processed again) then execute this block
    if stale?(:last_modified => @product.updated_at.utc, :etag => @product)
      respond_to do |wants|
        # ... normal response processing
      end
    end

    # If the request is fresh (i.e. it's not modified) then you don't need to do
    # anything. The default render checks for this using the parameters
    # used in the previous call to stale? and will automatically send a
    # :not_modified. So that's it, you're done.
  end
end
</ruby>

If you don't have any special response processing and are using the default rendering mechanism (i.e. you're not using respond_to or calling render yourself) then you’ve got an easy helper in fresh_when:

<ruby>
class ProductsController < ApplicationController

  # This will automatically send back a :not_modified if the request is fresh,
  # and will render the default template (product.*) if it's stale.

  def show
    @product = Product.find(params[:id])
    fresh_when :last_modified => @product.published_at.utc, :etag => @product
  end
end
</ruby>

h3. 进阶阅读

* "Scaling Rails Screencasts":http://railslab.newrelic.com/scaling-rails

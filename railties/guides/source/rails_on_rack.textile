h2. Rails on Rack

本篇涵盖了 Rails 与 Rack 和其它 Rack 组件的集成。通过本篇你将学习到：

* Create Rails Metal applications
* 在你的Rails应用中使用Rack中间件
* 理解ActionPack的内部堆
* 定义用户化的中间件堆

endprologue.

WARNING: This guide assumes a working knowledge of Rack protocol and Rack concepts such as middlewares, url maps and +Rack::Builder+.

h3. Rack介绍

bq. Rack 用 Ruby 为Web应用程序开发提供了一个最小的、模块化的和可适配的接口。By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call.

- "Rack API 文档":http://rack.rubyforge.org/doc/

讲解Rack并不是本篇的真正目的。如果你对Rack的基础不熟悉，你可以查看下面的 "学习资源":#学习资源 小节。

h3. Rails on Rack

h4. Rails 应用程序的 Rack 对象

<tt>ActionController::Dispatcher.new</tt> 是一个Rails应用程序中首要的Rack应用对象。符合Rack的网页服务器会使用 +ActionController::Dispatcher.new+ 对象来发布Rails应用。

h4. +rails server+

<tt>rails server</tt> does the basic job of creating a +Rack::Builder+ object and starting the webserver. This is Rails' equivalent of Rack's +rackup+ script.

这里是 +rails server+ 如何创建 +Rack::Builder+ 实例

<ruby>
app = Rack::Builder.new {
  use Rails::Rack::LogTailer unless options[:detach]
  use Rails::Rack::Debugger if options[:debugger]
  use ActionDispatch::Static
  run ActionController::Dispatcher.new
}.to_app
</ruby>

Middlewares used in the code above are primarily useful only in the development environment. 以下表格解释了它们的用法：

|_.Middleware|_.Purpose|
|+Rails::Rack::LogTailer+|Appends log file output to console|
|+ActionDispatch::Static+|Serves static files inside +Rails.root/public+ directory|
|+Rails::Rack::Debugger+|Starts Debugger|

h4. +rackup+

使用 +rackup+ 代替 Rails的 +rails server+, you can put the following inside +config.ru+ of your Rails application's root directory:

<ruby>
# Rails.root/config.ru
require "config/environment"

use Rails::Rack::LogTailer
use ActionDispatch::Static
run ActionController::Dispatcher.new
</ruby>

And start the server:

<shell>
$ rackup config.ru
</shell>

查找更多不同的 +rackup+ 选项：

<shell>
$ rackup --help
</shell>

h3. Action Controller 中间件堆

很多Action Controller的内部组件使用Rack中间件实现。 +ActionController::Dispatcher+ 使用 +ActionController::MiddlewareStack+ to combine various internal and external middlewares to form a complete Rails Rack application.

NOTE: +ActionController::MiddlewareStack+ is Rails' equivalent of +Rack::Builder+, but built for better flexibility and more features to meet Rails' requirements.

h4. 检查中间件堆

Rails 提供了方便的工具，可以检查使用中的中间件堆：

<shell>
$ rake middleware
</shell>

对于刚生成的Rails应用程序，看来会象这样：

<ruby>
use ActionDispatch::Static
use Rack::Lock
use ActiveSupport::Cache::Strategy::LocalCache
use Rack::Runtime
use Rails::Rack::Logger
use ActionDispatch::ShowExceptions
use ActionDispatch::RemoteIp
use Rack::Sendfile
use ActionDispatch::Callbacks
use ActiveRecord::ConnectionAdapters::ConnectionManagement
use ActiveRecord::QueryCache
use ActionDispatch::Cookies
use ActionDispatch::Session::CookieStore
use ActionDispatch::Flash
use ActionDispatch::ParamsParser
use Rack::MethodOverride
use ActionDispatch::Head
use ActionDispatch::BestStandardsSupport
run Blog::Application.routes
</ruby>

每个中间件的用途可以在 "Internal Middlewares":#internal-middleware-stack 这节查看。

h4. 配置中间件堆

Rails 提供了一个简单的配置界面：+config.middleware+ ，可以添加、删除和修改堆里的中间件 via +application.rb+ or the environment specific configuration file <tt>environments/&lt;environment&gt;.rb</tt>.

h5. 添加中间件

你可以使用下列的方法在堆中添加新的中间件：

* <tt>config.middleware.use(new_middleware, args)</tt> - 在堆底添加新的中间件。

* <tt>config.middleware.insert_before(existing_middleware, new_middleware, args)</tt> - Adds the new middleware before the specified existing middleware in the middleware stack.

* <tt>config.middleware.insert_after(existing_middleware, new_middleware, args)</tt> - Adds the new middleware after the specified existing middleware in the middleware stack.

<ruby>
# config/application.rb

# Push Rack::BounceFavicon at the bottom
config.middleware.use Rack::BounceFavicon

# Add Lifo::Cache after ActiveRecord::QueryCache.
# Pass { :page_cache => false } argument to Lifo::Cache.
config.middleware.insert_after ActiveRecord::QueryCache, Lifo::Cache, :page_cache => false
</ruby>

h5. Swapping a Middleware

You can swap an existing middleware in the middleware stack using +config.middleware.swap+.

<ruby>
# config/application.rb

# Replace ActionController::Failsafe with Lifo::Failsafe
config.middleware.swap ActionController::Failsafe, Lifo::Failsafe
</ruby>

h5. 中间件堆是一个队列Middleware Stack is an Array

中间堆表现象一个普通的 +Array+ 。 你可以使用任意的 +Array+ 方法去插入、排序或者删除堆中的元素。本节之前描述的方法 are just convenience methods.

例如， the following removes the middleware matching the supplied class name:

<ruby>
config.middleware.delete(middleware)
</ruby>

h4. 内部中间件堆

很多 Action Controller 的功能是用中间件实现的。 下面的表格展示了每个的用途：

|_.Middleware|_.Purpose|
|+Rack::Lock+|Sets <tt>env["rack.multithread"]</tt> flag to +true+ and wraps the application within a Mutex.|
|+ActionController::Failsafe+|Returns HTTP Status +500+ to the client if an exception gets raised while dispatching.|
|+ActiveRecord::QueryCache+|Enables the Active Record query cache.|
|+ActionController::Session::CookieStore+|Uses the cookie based session store.|
|+ActionController::Session::MemCacheStore+|Uses the memcached based session store.|
|+ActiveRecord::SessionStore+|Uses the database based session store.|
|+Rack::MethodOverride+|Sets HTTP method based on +_method+ parameter or <tt>env["HTTP_X_HTTP_METHOD_OVERRIDE"]</tt>.|
|+Rack::Head+|Discards the response body if the client sends a +HEAD+ request.|

TIP: It's possible to use any of the above middlewares in your custom Rack stack.

h4. 定制内部中间件堆

可以使用<tt>ActionController::Dispatcher.middleware=</tt>将整个中间件堆替换成定制的堆。

Put the following in an initializer:

<ruby>
# config/initializers/stack.rb
ActionController::Dispatcher.middleware = ActionController::MiddlewareStack.new do |m|
  m.use ActionController::Failsafe
  m.use ActiveRecord::QueryCache
  m.use Rack::Head
end
</ruby>

现在检查一下中间件堆：

<shell>
$ rake middleware
(in /Users/lifo/Rails/blog)
use ActionController::Failsafe
use ActiveRecord::QueryCache
use Rack::Head
run ActionController::Dispatcher.new
</shell>

h4. 使用 Rack 构建器

The following shows how to replace use +Rack::Builder+ instead of the Rails supplied +MiddlewareStack+.

<strong>Clear the existing Rails middleware stack</strong>

<ruby>
# config/application.rb
config.middleware.clear
</ruby>

<br />
<strong>Add a +config.ru+ file to +Rails.root+</strong>

<ruby>
# config.ru
use MyOwnStackFromScratch
run ActionController::Dispatcher.new
</ruby>

h3. 学习资源

h4. 学习Rack

* "Rack的官方网站":http://rack.github.com
* "介绍Rack":http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html
* "Ruby on Rack #1 - Hello Rack!":http://m.onkey.org/ruby-on-rack-1-hello-rack
* "Ruby on Rack #2 - The Builder":http://m.onkey.org/ruby-on-rack-2-the-builder

h4. 理解中间件

* "Railscast on Rack Middlewares":http://railscasts.com/episodes/151-rack-middleware
